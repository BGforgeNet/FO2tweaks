#define SCRIPT_REALNAME "gl_g_autodoors"

#include "headers/fo2tweaks/fo2tweaks.h"

procedure start;
procedure map_enter_p_proc;
procedure set_door_flag(variable state);
procedure gamemode_handler;
procedure autoclose;
procedure close_door(variable door);

#define PORTAL      (0)
#define DOOR_FLAGS  (0x24)

/**
 * If there's any party member within this distance, door won't autoclose.
 */
#define DOOR_CLOSE_DIST  5

#define set_autodoors "autodoors"
variable only_once = 0;
variable enabled = 0;

procedure start begin
  if game_loaded then begin
    enabled = fo2tweaks_setting(sec_main, set_autodoors);
    if enabled > 0 then begin
      register_hook_proc(HOOK_GAMEMODECHANGE, gamemode_handler);
      call map_enter_p_proc;
      ndebug("initialized");
    end
  end
end

procedure map_enter_p_proc begin
  if enabled > 0 then call set_door_flag(FLAG_WALKTHRU);
end

procedure map_update_p_proc begin
  if combat_is_initialized then return;
  if enabled > 1 then call autoclose;
end

procedure set_door_flag(variable flag) begin
  variable obj, pid;
  foreach (obj in list_as_array(LIST_SCENERY)) begin
    if is_door(obj) then set_proto_data(obj_pid(obj), DOOR_FLAGS, flag);
  end
end

procedure gamemode_handler begin
  variable old_mode = get_sfall_arg_at(1);
  variable new_mode = get_game_mode;
  if mode_ended(COMBAT, old_mode, new_mode) then begin
    call set_door_flag(FLAG_WALKTHRU);
    ndebug("combat ended, enabled walking through doors");
  end
  if mode_started(COMBAT, old_mode, new_mode) then begin
    call set_door_flag(0);
    ndebug("combat started, disabled walking through doors");
  end
end

/**
 * Iterate over scenery, call close_door on each door.
 */
procedure autoclose() begin
  variable obj;
  foreach (obj in list_as_array(LIST_SCENERY)) begin
    if is_door(obj) then call close_door(obj);
  end
end

/**
 * Closes the door, if there are no nearby party members.
 */
procedure close_door(variable door) begin
  variable who;
  if not (obj_is_open(door)) then return;
  if (tile_distance_objs(dude_obj, door) <= DOOR_CLOSE_DIST) then return;
  foreach who in party_member_list_critters begin
    if (tile_distance_objs(who, door) <= DOOR_CLOSE_DIST) then return;
  end
  obj_close(door);
end
