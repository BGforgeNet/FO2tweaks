#define SCRIPT_REALNAME "gl_g_damage_mod"

#include "headers/fo2tweaks/fo2tweaks.h"

//ecco ammo
#define PID_PBS_50_AMMO             (610)
#define PID_PBS_SHOTGUN_SLUGS       (614)
#define PID_PBS_223_AP              (615)
#define PID_PBS_9MM_SMG             (629)
#define PID_PBS_40MM_HE             (631)
#define PID_PBS_40MM_IC             (632)
#define PID_PBS_14MM_JHP            (633)
#define PID_PBS_SHOTGUN_BUCKSHOTS   (641)

#define BODYPART_HEAD 0
#define BODYPART_LEFT_ARM 1
#define BODYPART_RIGHT_ARM 2
#define BODYPART_TORSO_UNCALLED 3
#define BODYPART_RIGHT_LEG 4
#define BODYPART_LEFT_LEG 5
#define BODYPART_EYES 6
#define BODYPART_GROIN 7
#define BODYPART_TORSO_CALLED 8

//critical hit tables
#define CRITICAL_VALUE_TYPE_MULT 0
#define CRITICAL_VALUE_TYPE_EFFECTS 1
#define CRITICAL_VALUE_TYPE_STAT_CHECK 2
#define CRITICAL_VALUE_TYPE_CHECK_MOD 3
#define CRITICAL_VALUE_TYPE_FAIL_EFFECT 4
#define CRITICAL_VALUE_TYPE_MSG 5
#define CRITICAL_VALUE_TYPE_FAIL_MSG 6

#define sec_damage_mod "damage_mod"
#define set_damage_mod "damage_mod"
#define set_damage_mod_difficulty "damage_difficulty"
#define set_damage_mod_party_scale_damage "party_scale_damage"

#define set_damage_mod_ammo_pids "ammo_pids"
#define sec_damage_mod_ammo_dr "damage_mod_ammo_dr"
#define sec_damage_mod_ammo_type "damage_mod_ammo_type"

#define is_bypassing_armor(flags) ((flags bwand DAM_BYPASS) != 0)
#define is_instadeath_hit(flags) ((flags bwand DAM_DEAD) != 0)

variable begin
  old_total = 0, new_total = 0;
  ammo_pids;
  mod_ammo_pids;
  enabled;
  dr_mod_list;
  type_ammo;
  ammo_damage;
  damage_difficulty;
  party_scale_damage;
end

procedure start;
procedure damage_handler;
procedure get_dr_dt(variable attacker, variable target, variable dmg_type, variable dr_mod, variable target_flags, variable penetrate);
procedure fix_ammo_stats(variable pids);
procedure inv_handler;
procedure get_ammo_pids;
procedure update_dr_mod(variable dr_mod_list);
procedure get_real_damage_type(variable weapon);
procedure load_ammo_damage_type(variable type_ammo);
procedure check_damage_formula;
procedure get_default_dr_mod_list;

procedure start begin
  if game_loaded then begin
    enabled = fo2tweaks_setting(sec_main, set_damage_mod);
    if enabled == 1 then begin
      variable default_dr_mod_list, custom_dr_mod_list;
      call check_damage_formula;
      //custom DR values
      default_dr_mod_list = get_default_dr_mod_list;
      custom_dr_mod_list = get_ini_section(fo2tweaks_ini, sec_damage_mod_ammo_dr);
      dr_mod_list = array_append(default_dr_mod_list, custom_dr_mod_list);
      fix_array(dr_mod_list);
      ndebug("dr_mod_list length is " + len_array(dr_mod_list));
      call update_dr_mod(dr_mod_list);

      //cosmetic change
      ammo_pids = f2_ammo_pids;
      mod_ammo_pids = fo2tweaks_comsep_setting(sec_damage_mod, set_damage_mod_ammo_pids);
      ammo_pids = array_append(ammo_pids, mod_ammo_pids);
      fix_array(ammo_pids);
      call fix_ammo_stats(ammo_pids);

      //ammo types dealing alternative damage
      type_ammo = get_ini_section(fo2tweaks_ini, sec_damage_mod_ammo_type);
      ammo_damage = load_ammo_damage_type(type_ammo);
      fix_array(ammo_damage);

      party_scale_damage = fo2tweaks_setting(sec_damage_mod, set_damage_mod_party_scale_damage);
      damage_difficulty = fo2tweaks_setting(sec_damage_mod, set_damage_mod_difficulty);

      register_hook_proc(HOOK_COMBATDAMAGE, damage_handler);
      ndebug("initialized");
    end
  end
end

procedure load_ammo_damage_type(variable type_ammo) begin
  variable k, v, pid, ar, tmp, t, dmg_type;
  ar = temp_array_map;
  foreach k: v in type_ammo begin
    tmp = string_split(v, ",");
    foreach t in tmp begin
      pid = atoi(t);
      dmg_type = atoi(k);
      ar[pid] = dmg_type;
      ndebug("set ammo pid " + pid + " to do damage type " + dmg_type);
    end
  end
  return ar;
end

procedure get_default_dr_mod_list begin
  variable mod_list;
  mod_list = {
    PID_10MM_JHP: 35, // vanilla is 25
    PID_10MM_AP: -35, // vanilla is -25

    PID_14MM_AP: -35, // vanilla is -50

    PID_2MM_EC_AMMO: -20,

    PID_223_FMJ: -20,

    PID_44_MAGNUM_JHP: 35, // vanilla is 20
    PID_44_FMJ_MAGNUM: -20,

    PID_45_CALIBER_AMMO: 0,

    PID_4_7MM_CASELESS: -10,

    PID_5MM_JHP: 35,
    PID_5MM_AP: -35,

    PID_7_62MM_AMMO: -20, // vanilla is -10

    PID_9MM_AMMO: 0, // vanilla is 10
    PID_9MM_BALL: -20, // vanilla is 0

    PID_BBS: 0,

    PID_EXPLOSIVE_ROCKET: 35, // vanilla is -25
    PID_ROCKET_AP: -35, // vanilla is -50
    PID_ROBO_ROCKET_AMMO: -25,

    PID_FLAMETHROWER_FUEL: 25,
    PID_FLAMETHROWER_FUEL_MK_II: 0,

    PID_SMALL_ENERGY_CELL: 0,
    PID_MICRO_FUSION_CELL: 0,

    PID_SHOTGUN_SHELLS: 0,

    PID_HN_NEEDLER_CARTRIDGE: 0,
    PID_HN_AP_NEEDLER_CARTRIDGE: -35, //vanilla is 0


    //ecco ammo
    PID_PBS_50_AMMO: -18,
    PID_PBS_SHOTGUN_SLUGS: -20,
    PID_PBS_223_AP: -35,
    PID_PBS_40MM_HE: 0,
    PID_PBS_40MM_IC: 35,
    PID_PBS_14MM_JHP: 35,
    PID_PBS_SHOTGUN_BUCKSHOTS: 20

  };
  return mod_list;
end

procedure map_enter_p_proc begin
  if enabled == 1 then begin
    call check_damage_formula;
    call update_dr_mod(dr_mod_list);
    call fix_ammo_stats(ammo_pids);
  end
end

procedure check_damage_formula begin
  variable damage_formula = get_ini_setting("ddraw.ini|Misc|DamageFormula");
  if damage_formula != 0 then begin
    ndebug("Damage Formula set to, resetting" + damage_formula);
    set_ini_setting("ddraw.ini|Misc|DamageFormula", 0);
    float_msg(dude_obj, "FO2tweaks: damage formula setting in ddraw.ini was incorrect, damage mod failed to load. The setting is fixed now. EXIT AND RE-LAUNCH THE GAME now.", FLOAT_MSG_WARNING);
    return false;
  end
  return true;
end

procedure update_dr_mod(variable dr_mod_list) begin
  variable pid, mod, type;
  foreach pid: mod in dr_mod_list begin
    //have to pass strings, as 0's can't be stored in a map
    if typeof(pid) != VALTYPE_INT then pid = atoi(pid);
    if typeof(mod) != VALTYPE_INT then mod = atoi(mod);

    if not is_ammo_pid(pid) then begin //not ammo, how did it get here?
      ndebug("warning | item pid " + pid + " is not ammo");
      continue;
    end

    ndebug("set DR mod to " + mod + " for ammo pid " + pid);
    set_proto_data(pid, PROTO_AM_DR_MOD, mod);
  end
end

procedure fix_ammo_stats(variable pids) begin
  variable pid, type, mult, divisor, dr_mod, cd; // div is now a keyword in sfall
  foreach pid in pids begin
    divisor = 100;

    if not is_ammo_pid(pid) then begin //not ammo, how did it get here?
      ndebug("warning | item pid " + pid + " is not ammo");
      continue;
    end

    dr_mod = get_proto_data(pid, PROTO_AM_DR_MOD);
    mult = 100 + dr_mod;

    cd = gcd(divisor, mult);
    divisor = divisor / cd;
    mult = mult / cd;

    set_proto_data(pid, PROTO_AM_DMG_MULT, mult);
    set_proto_data(pid, PROTO_AM_DMG_DIV, divisor);
    ndebug("fixed stats for ammo pid " + pid);
  end
  ndebug("beautified ammo stats");
end

// 1.2 damage has 20% chance to be rounded up to 2
procedure round_chance(variable dmg) begin
  variable base_dmg = floor2(dmg);
  variable chance = (dmg - base_dmg)*100;
  variable rnd = random(1, 100);
  variable final_dmg;

  if dmg < 0 then begin
    ndebug("dmg is " + dmg + ", rounded dmg is 0");
    return 0;
  end

  ndebug("dmg is " + dmg + ", chance to round up is " + chance + "%, rnd is " + rnd);
  if chance > rnd then begin
    final_dmg = base_dmg + 1;
  end else begin
    final_dmg = base_dmg;
  end
  ndebug("rounded dmg is " + final_dmg);
  return final_dmg;
end

procedure get_critical_level(variable who) begin
  variable level = random(0, 4);
  if (who == dude_obj) and has_trait(TRAIT_PERK, who, PERK_better_criticals) then level = level + 1;
  return level;
end

// returns [critical mult, critical effect flags]
procedure get_critical_type(variable attacker, variable target) begin
  variable mult = 2;  // default
  variable flags = 0; // default
  variable chance = get_critter_stat(attacker, STAT_crit_chance);
  variable rnd = random(1,100);
  variable crit_level;

  if rnd > chance then return [mult/2.0, flags]; //not critical

  crit_level = get_critical_level(attacker);
  mult = get_critical_table(critter_kill_type(target), BODYPART_TORSO_UNCALLED, crit_level, CRITICAL_VALUE_TYPE_MULT);
  flags = get_critical_table(critter_kill_type(target), BODYPART_TORSO_UNCALLED, crit_level, CRITICAL_VALUE_TYPE_EFFECTS);
  ndebug("critical level " + crit_level + ", critical mult " + mult + ", flags " + flags);
  return [mult/2.0, flags];
end

procedure get_bullet_damage(variable dmg_min, variable dmg_max, variable ranged_bonus, variable dt,
  variable ammo_mult, variable critical_mult, variable difficulty_mult, variable dr_mult)
begin
  variable rnd = random(dmg_min, dmg_max);

  /* original formula
    ND = net damage value
    RD = random damage value produced from weapons hit damage range
    RB = ranged bonus (RB=0 unless the player has Bonus Ranged Damage perk)
    CM = critical hit damage multiplier (if no critical hit then CM=2, otherwise assigned value from critical hit table)
    ADR = armor damage resistance value
    ADT = armor damage threshold value
    X = ammo dividend
    Y = ammo divisor
    RM = ammo resistance modifier (only value allowed to be negative or positive in the equation)
    CD = combat difficulty multiplier (Easy=75, Normal=100, Hard=125)

    ND = ( ((RD+RB)*(X*CM)/Y/2 * CD/100) - ADT) * ((100-(ADR+RM))/100 )
    nd = ( ((rd + rb) * (x * cm) / y / 2.0 * (cd / 100.0) ) - adt) * ( (100.0 - (adr + rm)) / 100.0 ); // original
    nd = ( ((rd + rb) * (1.0*x/y) * (cm/2.0) * (cd/100.0) ) - adt) * ( (100.0 - (adr + rm)) / 100.0 ); // original, ease of reading
  */

  /* new formula: dt is subtracted first, then the rest is multiplied by corresponding miltipliers */

  variable dmg = round_chance(1.0 * (rnd + ranged_bonus - dt) * ammo_mult * critical_mult * difficulty_mult * dr_mult);
  ndebug("rnd " + rnd + " ranged_bonus " + ranged_bonus + " dt " + dt + " ammo_mult " + ammo_mult
        + " critical_mult " + critical_mult + " difficulty_mult " + difficulty_mult + " dr_mult " + dr_mult
        + ", dmg " + dmg);
  if dmg < 0 then dmg = 0;
  return dmg;
end

procedure get_total_damage (
  variable attacker, variable target, variable dmg_type, variable dr_mod,
  variable dmg_min, variable dmg_max,
  variable ranged_bonus, variable ammo_mult, variable critical_mult, variable difficulty_mult,
  variable bullets_number, variable flags, variable penetrate)
begin
  variable total_damage = 0, bullet_damage = 0, i, critical_type, dr_dt,
  dr_mult, dt;

  //first bullet to hit keeps all the original mults
  dr_dt = get_dr_dt(attacker, target, dmg_type, dr_mod, flags, penetrate);
  dr_mult = dr_dt[0];
  dt = dr_dt[1];

  total_damage = get_bullet_damage(dmg_min, dmg_max, ranged_bonus, dt, ammo_mult, critical_mult, difficulty_mult, dr_mult);

  //burst: consecutive bullets roll their own critical damage, including armor bypass, but excluding crippling effects
  if bullets_number > 1 then begin
    for (i = 2; i <= bullets_number; i++) begin
      critical_type = get_critical_type(attacker, target);
      critical_mult = critical_type[0];
      flags = critical_type[1];
      dr_dt = get_dr_dt(attacker, target, dmg_type, dr_mod, flags, penetrate);
      dr_mult = dr_dt[0];
      dt = dr_dt[1];

      bullet_damage = get_bullet_damage(dmg_min, dmg_max, ranged_bonus, dt, ammo_mult, critical_mult, difficulty_mult, dr_mult);
      total_damage += bullet_damage;
    end
  end

  //pyromaniac
  if attacker == dude_obj
    and has_trait(TRAIT_PERK, attacker, PERK_pyromaniac_perk)
    and dmg_type == DMG_fire
  then begin
    ndebug("pyromaniac: +5 dmg");
    total_damage = total_damage + 5;
  end
  //living anatomy
  if attacker == dude_obj
    and has_trait(TRAIT_PERK, attacker, PERK_living_anatomy_perk)
    and critter_kill_type(target) != KILL_TYPE_robot_kills
  then begin
    ndebug("living anatomy: +5 dmg");
    total_damage = total_damage + 5;
  end
  // instadeath crit
  if (attacker == dude_obj)
    and is_instadeath_hit(flags)
    and (total_damage < 1)
  then begin
    ndebug("instadeath: ensured 1 dmg");
    total_damage = 1;
  end

  return total_damage;
end

procedure get_resist_defines(variable dmg_type) begin
  variable cr_dt_type, cr_dr_type;

  switch dmg_type begin
    case DMG_normal_dam:
      cr_dr_type = STAT_dmg_resist;
      cr_dt_type = STAT_dmg_thresh;
    case DMG_laser:
      cr_dr_type = STAT_dmg_resist_laser;
      cr_dt_type = STAT_dmg_thresh_laser;
    case DMG_fire:
      cr_dr_type = STAT_dmg_resist_fire;
      cr_dt_type = STAT_dmg_thresh_fire;
    case DMG_plasma:
      cr_dr_type = STAT_dmg_resist_plasma;
      cr_dt_type = STAT_dmg_thresh_plasma;
    case DMG_electrical:
      cr_dr_type = STAT_dmg_resist_electrical;
      cr_dt_type = STAT_dmg_thresh_electrical;
    case DMG_emp:
      cr_dr_type = STAT_dmg_resist_emp;
      cr_dt_type = STAT_dmg_thresh_emp;
    case DMG_explosion:
      cr_dr_type = STAT_dmg_resist_explosion;
      cr_dt_type = STAT_dmg_thresh_explosion;
    default: //should never fire, but just in case
      cr_dr_type = STAT_dmg_resist;
      cr_dt_type = STAT_dmg_thresh;
  end

  return [cr_dr_type, cr_dt_type];
end

//returns [dr_mult, dt]
procedure get_dr_dt(variable attacker, variable target, variable dmg_type, variable dr_mod, variable target_flags, variable penetrate)
begin
  variable target_dr, target_dt, final_dr, final_dt, dr_mult,
    resist_defines, dr_type, dt_type;

  //determine resits types
  resist_defines = get_resist_defines(dmg_type);
  dr_type = resist_defines[0];
  dt_type = resist_defines[1];
  ndebug("critter dr type is " + dr_type + ", dt type is " + dt_type);

  //get critter resists
  target_dr = get_critter_stat(target, dr_type); //includes armor and drugs
  target_dt = get_critter_stat(target, dt_type);

  if attacker == dude_obj and has_trait(TRAIT_TRAIT, attacker, TRAIT_finesse) then begin
    ndebug("attacking with finesse, extra 30% to dr");
    target_dr = target_dr + 30;
  end
  ndebug("target dr is " + target_dr + ", target_dt is " + target_dt);

  if target_dr > 90 then target_dr = 90; //cap DR
  if is_bypassing_armor(target_flags) then begin //critical bypass armor
    ndebug("armor bypassing critical, reducing dt and dr by magnitude of 5");
    target_dr = target_dr * 0.2;
    target_dt = target_dt * 0.2;
  end else if penetrate then begin //weapon penetrate perk
    ndebug("weapon has penetrate perk, reducing dt by magnitude of 5");
    target_dt = target_dt * 0.2;
  end

  ndebug("target dr is " + target_dr + ", dr_mod is " + dr_mod);
  final_dr = 1.0 * target_dr * (100.0 + dr_mod) / 100.0;
  ndebug("final dr is " + final_dr);
  if final_dr < 0 then final_dr = 0;
  if final_dr > 90 then final_dr = 90.0;
  dr_mult = (100.0 - final_dr) / 100.0;

  final_dt = target_dt * (100.0 + dr_mod) / 100.0;
  if final_dt < 0 then final_dt = 0;
  ndebug("dr_mult is " + dr_mult);
  ndebug("final dt is " + final_dt);

  return [dr_mult, final_dt];
end

procedure damage_handler begin
  /*
    Runs when:
    1) Game calculates how much damage each target will get. This includes primary target as well as all extras (explosions and bursts). This happens BEFORE the actual attack animation.
    2) AI decides whether it is safe to use area attack (burst, grenades), if he might hit friendlies.
    Does not run for misses, or non-combat damage like dynamite explosions.

    critter arg1  - The target
    critter arg2  - The attacker
    int     arg3  - The amount of damage to the target
    int     arg4  - The amount of damage to the attacker
    int     arg5  - The special effect flags for the target
    int     arg6  - The special effect flags for the attacker
    int     arg7  - The weapon used in the attack
    int     arg8  - The bodypart that was struck
    int     arg9  - Damage Multiplier (this is divisorided by 2, so a value of 3 does 1.5x damage, and 8 does 4x damage. Usually it's 2, but with Silent Death perk and the corresponding attack conditions, it's 4; for critical hits, the value is taken from the critical table)
    int     arg10 - Number of bullets actually hit the target (1 for melee attacks)
    int     arg11 - The amount of knockback to the target
    int     arg12 - Attack Type (see ATKTYPE_* constants)

    int     ret1 - The damage to the target
    int     ret2 - The damage to the attacker
    int     ret3 - The special effect flags for the target
    int     ret4 - The special effect flags for the attacker
    int     ret5 - The amount of knockback to the target
  */

  variable target = get_sfall_arg;
  variable attacker = get_sfall_arg;
  variable target_damage = get_sfall_arg;
  variable attacker_damage = get_sfall_arg;
  variable target_flags = get_sfall_arg;
  variable attacker_flags = get_sfall_arg;
  variable weapon = get_sfall_arg;
  variable bodypart = get_sfall_arg;
  variable damage_multiplier = get_sfall_arg;
  variable bullets_number = get_sfall_arg;
  variable knockback_distance = get_sfall_arg;
  variable attack_type = get_sfall_arg;

  variable nd = 0, rd, ranged_bonus = 0, cm, dr_mod = 0, cd;
  variable begin
    dmg_type;
    cd_setting;
    i;
    ammo_mult;
    difficulty_mult;
    critical_mult;

    weapon_pid;
    dmg_min;
    dmg_max;
    ammo_pid;
    penetrate;
  end

  if weapon then begin
    ndebug("weapon name is " + obj_name(weapon));
    weapon_pid = obj_pid(weapon);
    dmg_min = get_proto_data(weapon_pid, PROTO_WP_DMG_MIN);
    dmg_max = get_proto_data(weapon_pid, PROTO_WP_DMG_MAX);
    ndebug("dmg_minmax - " + dmg_min + ":" + dmg_max);
    ammo_pid = get_active_ammo_pid(attacker);
  end else begin //unarmed
    ndebug("unarmed attack, skipping");
    return;
  end

  if not is_gun(weapon) then begin
    ndebug("not a gun, skipping");
    return;
  end

  if not is_critter(target) then begin //hit a wall?
    ndebug("target " + obj_name(target) + " is not a critter, skipping");
    return;
  end

  // hook gets invoked twice when an explosion hits both attacker and target. Need to distinguish.
  if (attacker_flags bwand DAM_BACKWASH) != 0 then begin
    ndebug(obj_name(attacker) + " hurts self! Setting target to attacker, recalculating attacker self damage.");
    target = attacker;
    target_flags = attacker_flags; // this should work correctly, right?
  end

  //ranged_bonus - bonus ranged damage perk
  ranged_bonus = 0;
  if attacker == dude_obj then begin
    ranged_bonus = 2 * has_trait(TRAIT_PERK, dude_obj, PERK_bonus_ranged_damage);
    ndebug("ranged bonus: added " + ranged_bonus + " damage");
  end

  //weapon penetrate perk
  penetrate = false;
  if get_proto_data(obj_pid(weapon), PROTO_WP_PERK) == PERK_weapon_penetrate then penetrate = true;

  //cm - critical hit multiplier, default 2
  cm = damage_multiplier;

  //ammo: damage resistance mod
  if ammo_pid then begin
    dr_mod = get_proto_data(ammo_pid, PROTO_AM_DR_MOD);
    ndebug("ammo dr mod is " + dr_mod);
  end else begin //solar scorcher
    dr_mod = 0;
    ndebug("weapon has no ammo, no dr mod");
  end

  dmg_type = get_real_damage_type(weapon);
  ndebug("damage type is " + dmg_type);

  //cd - combat difficulty  multiplier
  if party_scale_damage and in_party(attacker) then cd = 100; //party, vanilla
  else begin
    if damage_difficulty then cd = 75 + (damage_difficulty - 1) * 25; //all, decoupled
    else cd = 75 + combat_difficulty * 25; //all, coupled
  end

  difficulty_mult = cd / 100.0;
  ammo_mult = (100 + dr_mod) / 100.0;
  critical_mult = damage_multiplier / 2.0;

  nd = get_total_damage(attacker, target, dmg_type, dr_mod, dmg_min, dmg_max,
    ranged_bonus, ammo_mult, critical_mult, difficulty_mult, bullets_number, target_flags, penetrate);

  ndebug("ranged_bonus " +  ranged_bonus + ", cm " +  cm + ", cd " +  cd + ", dmg_type " + dmg_type
      + ", ammo_mult " + ammo_mult);

  //logging totals for comparison
  old_total += target_damage;
  new_total += nd;

  ndebug("DAM_BACKWASH flag: " + (attacker_flags bwand DAM_BACKWASH));

  // normal run
  if (attacker_flags bwand DAM_BACKWASH) == 0 then begin
    set_sfall_return(nd);
    set_sfall_arg(2, nd);
    ndebug("attacker " + obj_name(attacker) + ", target " + obj_name(target) +", old target damage " + target_damage + ", new target damage " + nd);
  end else begin // self-hurt run
    set_sfall_return(target_damage);
    set_sfall_return(nd);
    set_sfall_arg(3, nd);
    ndebug("attacker " + obj_name(attacker) + ", target " + obj_name(target) +", old attacker damage " + attacker_damage + ", new attacker damage " + nd);
  end

  //logging totals for comparison
  ndebug("old total " + old_total + ", new total " + new_total);

end

procedure get_real_damage_type(variable weapon) begin
  variable ammo_pid = get_weapon_ammo_pid(weapon), type;
  type = ammo_damage[ammo_pid];
  if type != 0 then begin
    ndebug("damage type changed to " + type);
    return type;
  end
  return weapon_dmg_type(weapon); //molotov also covered here
end
