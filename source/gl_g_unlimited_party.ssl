#include "headers\define.h"
#include "headers\command.h"
#include "headers\sfall\sfall.h"
#include "headers\fo2tweaks\fo2tweaks.h"

#define NAME "gl_g_unlimited_party"
#define set_unlimited_party "unlimited_party"
#define sec_unlimited_party "unlimited_party"
#define set_unlimited_party_npc_pids "npc_pids"

variable begin
  old_mode := 0;
  new_mode;
  party_members;
  potential_party_member_pids;
  mod_npc_pids;
  dude_cha;
  boosted := 0;
  dropped := 0;
end

procedure start;
procedure gamemode_handler;

procedure allow_join begin
  variable who;
  party_members := party_member_list_critters;
  fix_array(party_members);

  ndebug("current party members:");
  foreach who in party_members begin
    if who != dude_obj then ndebug(obj_name(who));
  end

  who := dialog_obj;
  ndebug("talking to " + obj_name(who));

  if is_in_array(who, party_members) then begin
    ndebug(obj_name(who) + " is already in party, skipping");
    return;
  end
  if not is_in_array(obj_pid(who), potential_party_member_pids) then begin
    ndebug(obj_name(who) + " is not a joinable NPC, skipping");
    return;
  end

  //drop everyone else
  foreach who in party_members begin
    if who != dude_obj then begin
      party_remove(who);
      ndebug("dropped " + obj_name(who) + " from party");
      dropped := 1;
    end
  end

  //boost charisma
  dude_cha := dude_charisma;
  if dude_cha < 2 then begin
    set_critter_stat(dude_obj, STAT_ch, 2);
    ndebug("boosted charisma from " + dude_cha + " to 2");
    boosted := 1;
  end

end

procedure reset_state begin
  variable who;
  ndebug("dropped is " + dropped + ", boosted is " + boosted);
  if boosted then begin
    set_critter_stat(dude_obj, STAT_ch, dude_cha);
    ndebug("reset charisma to " + dude_cha);
    boosted := 0;
  end
  if dropped then begin
    foreach who in party_members begin
      if who != dude_obj then begin
        party_add(who);
        ndebug("added " + obj_name(who) + " back to party");
      end
    end
    dropped := 0;
  end
end

procedure gamemode_handler begin
  new_mode := get_game_mode;
  if mode_started(DIALOG, old_mode, new_mode) then call allow_join;
  if mode_ended(DIALOG, old_mode, new_mode) then call reset_state;
  old_mode := new_mode;
end

procedure start begin
  if game_loaded then begin
    variable enabled := fo2tweaks_setting(sec_main, set_unlimited_party);
    if enabled == 1 then begin
      potential_party_member_pids := f2rp_party_member_pids;
      mod_npc_pids := fo2tweaks_comsep_setting(sec_unlimited_party, set_unlimited_party_npc_pids);
      potential_party_member_pids := array_append(potential_party_member_pids, mod_npc_pids);
      fix_array(potential_party_member_pids);
      register_hook_proc(HOOK_GAMEMODECHANGE, gamemode_handler);
      ndebug("initialized");
    end
  end
end
