#define SCRIPT_REALNAME "gl_g_unlimited_party"
#include "headers/fo2tweaks/fo2tweaks.h"

#define set_unlimited_party "unlimited_party"
#define sec_unlimited_party "unlimited_party"
#define set_unlimited_party_npc_pids "npc_pids"

variable begin
  party_members;
  potential_party_member_pids;
  mod_npc_pids;
  dude_cha;
  boosted = 0;
  dropped = 0;
end

procedure start;
procedure gamemode_handler;

procedure allow_join(variable cri) begin
  variable who;
  party_members = party_member_list_critters;
  fix_array(party_members);

  ndebug("current party members:");
  foreach who in party_members begin
    if who != dude_obj then ndebug(obj_name(who));
  end

  ndebug("talking to " + obj_name(cri));

  if is_in_array(cri, party_members) then begin
    ndebug(obj_name(cri) + " is already in party, skipping");
    return;
  end
  if not is_in_array(obj_pid(cri), potential_party_member_pids) then begin
    ndebug(obj_name(cri) + " is not a joinable NPC, skipping");
    return;
  end else ndebug(obj_name(cri) + " is a joinable NPC, applying unlimited tweak");

  //drop everyone else
  foreach who in party_members begin
    if who != dude_obj then begin
      party_remove(who);
      ndebug("dropped " + obj_name(who) + " from party");
      dropped = 1;
    end
  end

  // boost charisma
  dude_cha = dude_charisma;
  ndebug("dude charisma is " + dude_cha);
  if dude_cha < 2 then begin
    // set_critter_stat doesn't set stats, it applies a mod
    set_critter_stat(dude_obj, STAT_ch, 1);
    ndebug("boosted charisma from 1 to 2");
    boosted = 1;
  end

end

procedure reset_state begin
  variable who;
  ndebug("dropped is " + dropped + ", boosted is " + boosted);
  if boosted then begin
    // set_critter_stat doesn't set stats, it applies a mod
    set_critter_stat(dude_obj, STAT_ch, -1);
    ndebug("reset charisma to 1");
    boosted = 0;
  end
  if dropped then begin
    foreach who in party_members begin
      if who != dude_obj then begin
        party_add(who);
        ndebug("added " + obj_name(who) + " back to party");
      end
    end
    dropped = 0;
  end
end

procedure gamemode_handler begin
  variable old_mode = get_sfall_arg_at(1);
  variable new_mode = get_game_mode;
  if mode_ended(DIALOG, old_mode, new_mode) then call reset_state;
  if mode_started(DIALOG, old_mode, new_mode) and obj_pid(dialog_obj) != PID_DOGMEAT then call allow_join(dialog_obj);
end

procedure talk_handler begin // Dogmeat only
  variable proc = get_sfall_arg;
  variable self = get_sfall_arg;
  variable armor = critter_inven_obj(dude_obj, INVEN_TYPE_WORN);
  if proc == talk_proc
    and obj_pid(self) == PID_DOGMEAT
    and not armor
  then call allow_join(self);
end

procedure start begin
  if game_loaded then begin
    variable enabled = fo2tweaks_setting(sec_main, set_unlimited_party);
    if enabled == 1 then begin
      potential_party_member_pids = f2rp_party_member_pids;
      mod_npc_pids = fo2tweaks_comsep_setting(sec_unlimited_party, set_unlimited_party_npc_pids);
      potential_party_member_pids = array_append(potential_party_member_pids, mod_npc_pids);
      fix_array(potential_party_member_pids);
      register_hook_proc(HOOK_GAMEMODECHANGE, gamemode_handler);
      register_hook_proc(HOOK_STDPROCEDURE, talk_handler); //specifically for Dogmeat, who checks party limit outside of dialog mode
      ndebug("initialized");
    end
  end
end
