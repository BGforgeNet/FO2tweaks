#define NAME "gl_g_party_skills"
#include "headers/fo2tweaks/fo2tweaks.h"

#define set_party_skills "party_skills"

procedure start;
procedure skill_handler;
variable enabled;

procedure skill_handler begin
  variable user := get_sfall_arg;
  variable target := get_sfall_arg;
  variable skill := get_sfall_arg;
  variable skill_bonus := get_sfall_arg;
  variable tmp, who, level;
  ndebug("skill " + skill + "user " + user + " target " + target);

  if not combat_is_initialized and user == dude_obj then begin
    tmp := get_party_skill_level(SKILL_LOCKPICK);
    who := tmp[0];
    level := tmp[1];
  if skill in [SKILL_LOCKPICK,] then begin
    set_sfall_return(0); //override
    end else begin
      call use_skill(user, target, skill, skill_bonus);
    end
    set_sfall_return(0); //override
  end else begin
    set_sfall_return(-1); //default engine handler
  end
end


procedure useobjon_handler begin
  variable target := get_sfall_arg;
  variable user := get_sfall_arg;
  variable obj := get_sfall_arg;
  variable who, level, tmp, obj2, ar;
  ar :=  [PID_LOCKPICKS, PID_EXP_LOCKPICK_SET];
  ndebug("user " + obj_name(user) + " target " + obj_name(target) + " obj " + obj_name(obj));
  if combat_is_initialized or user != dude_obj then return;

  if is_in_array(obj_pid(obj), ar) then begin
    set_sfall_return(0); //override
    tmp := get_party_skill_level(SKILL_LOCKPICK);
    who := tmp[0];
    level := tmp[1];
    ndebug(obj_name(who) + " has skill level " + level);
    if who != dude_obj then begin
      float_msg(who, mstr_skill(1000 + random(0,6)), FLOAT_MSG_NORMAL);
      ndebug("test1");
      set_self(who);
      obj2 := create_object(obj_pid(obj), 0, elevation(dude_obj));
      ndebug("obj2 is " + obj_name(obj2));
      add_obj_to_inven(who, obj2);
      ndebug("test2");
      set_self(who);
      //use_obj_on_obj(obj2, target);
      ndebug("test3");
    end
  end
end

procedure start begin
  if game_loaded then begin
    enabled := fo2tweaks_setting(sec_main, set_party_skills);
    if enabled == 1 then begin
      //register_hook_proc(HOOK_USESKILL, skill_handler);
      register_hook_proc(HOOK_USEOBJON, useobjon_handler);
      ndebug("initialized");
    end
  end
end
