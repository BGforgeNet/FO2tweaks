#define SCRIPT_REALNAME "gl_g_healing_revision"

#include "headers/fo2tweaks/fo2tweaks.h"

#define all_disabilities \
  (DAM_CRIP_ARM_LEFT bwor \
  DAM_CRIP_ARM_RIGHT bwor \
  DAM_CRIP_LEG_LEFT bwor \
  DAM_CRIP_LEG_RIGHT bwor \
  DAM_BLIND)

#define is_disabled(x) (critter_state(x) bwand all_disabilities)

#define doctor_used_array "g_doctor_used"
#define fa_used_array "g_fa_used"

#define doctor_skill_name 107
#define fa_skill_name 106

#define set_healing_revision "healing_revision"
#define sec_healing_revision "healing_revision"

#define set_healing_living_anatomy_min_doctor "living_anatomy_min_doctor"

#define msg_file "g_healing_revision.msg"
#define msg_heal_disabilities 1
#define msg_fail_disabilities 2
#define msg_not_in_combat 3
#define msg_no_chance 4
#define msg_healthy 5
#define msg_already_used 6
#define msg_fail 7
#define msg_living_anatomy 8
#define msg_living_anatomy_2 9
#define msg_got_xp 10
#define msg_healed_for 11
#define msg_dead 12

procedure start;
procedure healing_handler;
procedure missing_hp(variable who);
procedure grant_xp(variable hp, variable skill);
procedure get_skill_name(variable skill);

variable begin
  doctor_used;
  fa_used;
  enabled;
  doctor_min = 20;
  doctor_mult = 10;
  fa_mult = 5;
  heal_max = 15;
  cur_month;
  last_month;
  cur_day;
  last_day;
  living_anatomy_min_doctor;
  msg;
end

#define mymsg(x) message_str_game(msg, x)
#define display_mymsg(x) display_msg(mymsg(x))

procedure heal_disabilities(variable user, variable target, variable effective_skill) begin
  variable chance = effective_skill - doctor_min; //percentage
  ndebug("user " + user + ", target " + target + ", eff. doctor " + effective_skill);
  ndebug("chance " + chance + " eff. skill " + effective_skill + " min. doctor " + doctor_min);
  if chance < 1 then begin
    display_mymsg(msg_no_chance);
  end else begin
    variable r = random(1, 100);
    if r < chance then begin
      display_mymsg(msg_heal_disabilities);
      critter_uninjure(target, all_disabilities);
    end else begin
      display_mymsg(msg_fail_disabilities);
    end
  end
end

procedure is_healthy(variable target) begin
  variable max_hp = get_critter_stat(target, STAT_max_hp);
  variable cur_hp = get_critter_stat(target, STAT_current_hp);
  if cur_hp >= max_hp and not is_disabled(target) then begin
    return true;
  end else begin
    return false;
  end
end

procedure get_healed_hp(variable target, variable doctor_level, variable fa_level) begin
  variable mhp = missing_hp(target);
  variable healed = 0;
  variable healed_str;
  if doctor_level > 100 then doctor_level = 100;
  if fa_level > 100 then fa_level = 100;
  healed = (doctor_level/100.0)*(fa_level/100.0)*doctor_mult + random(-1, 1);
  healed = healed + 2 * has_trait(TRAIT_PERK, dude_obj, PERK_healer);
  if healed < 0 then healed = 0;
  healed_str = sprintf("%f", healed);
  ndebug("missing " + mhp + " doctor_level " + doctor_level + " fa_level " + fa_level + " healed " + healed_str
    + " max: " + heal_max +" |"+ fa_mult +"|" + doctor_mult);
  healed = floor2(healed);
  if healed > mhp then healed = mhp;
  return healed;
end

procedure get_fa_healed(variable target, variable fa_level) begin
  variable mhp = missing_hp(target);
  variable healed = 0;
  variable healed_str;
  if fa_level > 100 then fa_level = 100;
  healed = fa_mult * fa_level / 100.0 + random(-1, 1);
  if healed < 0 then healed = 0;
  healed_str = sprintf("%f", healed);
  ndebug("missing " + mhp + " fa_level " + fa_level + " healed " + healed_str + " | "+ fa_mult);
  healed = floor2(healed);
  if healed > mhp then healed = mhp;
  return healed;
end

procedure missing_hp(variable target) begin
  variable max_hp = get_critter_stat(target, STAT_max_hp);
  variable cur_hp = get_critter_stat(target, STAT_current_hp);
  variable mhp = max_hp - cur_hp;
  return mhp;
end

procedure use_doctor(variable user, variable target, variable skill_bonus, variable interactive = true) begin
  variable tmp, doctor_level, fa_level, effective_doctor, i;
  tmp = get_party_skill_level(SKILL_DOCTOR);
  doctor_level = tmp[1];
  tmp = get_party_skill_level(SKILL_FIRST_AID);
  fa_level = tmp[1];
  effective_doctor = doctor_level + skill_bonus;

  ndebug("doctor level " + doctor_level + ", skill bonus " + skill_bonus + ", effective " + effective_doctor);

  if interactive then begin
    if is_critter_dead(target) then begin
      display_mymsg(msg_dead);
      return false;
    end
    if is_healthy(target) then begin // healthy, nothing to do
      display_msg(obj_name(target) + mymsg(msg_healthy));
      return false;
    end else begin
      if is_in_array(obj_pid(target), doctor_used) then begin //already used doctor today
        variable skill_name = get_skill_name(SKILL_DOCTOR);
        display_msg(parse_str_2(mymsg(msg_already_used), obj_name(target), skill_name));
        return false;
      end
    end
  end

  ndebug("user " + user + ", target " + target + ", eff. doctor " + effective_doctor);
  ndebug("critter state " + sprintf("%d", critter_state(target)));

  if is_disabled(target) then call heal_disabilities(user, target, effective_doctor);

  if missing_hp(target) > 0 then begin
    variable name = obj_name(target);
    variable hp = get_healed_hp(target, effective_doctor, fa_level);
    ndebug("trying to heal " + name);

    call array_push(doctor_used, obj_pid(target));
    set_sfall_global("g_heal_d", get_day);

    game_time_advance(game_ticks(3600));
    if hp < 1 then begin
      display_mymsg(msg_fail);
      return false;
    end
    critter_heal(target, hp);
    display_msg(parse_str_2(mymsg(msg_healed_for), obj_name(target), hp));
    call grant_xp(hp, SKILL_DOCTOR);
  end
end

procedure use_first_aid(variable user, variable target, variable skill_bonus, variable interactive = true) begin
  variable fa_level, effective_fa, i, tmp;

  tmp = get_party_skill_level(SKILL_FIRST_AID);
  fa_level = tmp[1];
  effective_fa = fa_level + skill_bonus;
  ndebug("fa level " + fa_level + ", skill bonus " + skill_bonus + ", effective " + effective_fa);
  ndebug("userfa " + user + " target " + target);

  if interactive then begin
    if is_critter_dead(target) then begin
      display_mymsg(msg_dead);
      return false;
    end
    if is_healthy(target) then begin // healthy, nothing to do
      display_msg(obj_name(target) + mymsg(msg_healthy));
      return false;
    end else begin
      if is_in_array(obj_pid(target), fa_used) then begin //already used fa today
        variable skill_name = get_skill_name(SKILL_FIRST_AID);
        display_msg(parse_str_2(mymsg(msg_already_used), obj_name(target), skill_name));
        return false;
      end
    end
  end

  if missing_hp(target) > 0 then begin
    variable name = obj_name(target);
    variable hp = get_fa_healed(target, effective_fa);
    ndebug("trying to heal " + name);

    call array_push(fa_used, obj_pid(target));
    set_sfall_global("g_heal_d", get_day);

    game_time_advance(game_ticks(1800));
    if hp < 1 then begin
      display_mymsg(msg_fail);
      return false;
    end
    critter_heal(target, hp);
    display_msg(parse_str_2(mymsg(msg_healed_for), obj_name(target), hp));
    call grant_xp(hp, SKILL_FIRST_AID);
  end
end

procedure reset_heal_arrays begin
  ndebug("resetting heal arrays");
  clear_array(fa_used);
  clear_array(doctor_used);
end

procedure update_heal_arrays begin
  variable last_day = get_sfall_global_int("g_heal_d");
  ndebug("Last day " + last_day );
  if last_day == 0 then return;
  if get_day != last_day then call reset_heal_arrays;
end

procedure get_skill_name(variable skill) begin
  variable skill_name;
  if skill == SKILL_DOCTOR then begin
    skill_name = mstr_skill(doctor_skill_name);
  end else begin
    skill_name = mstr_skill(fa_skill_name);
  end
  return skill_name;
end

procedure grant_xp(variable hp, variable skill) begin
  variable xp = hp * 10;
  variable skill_name = get_skill_name(skill);
  give_exp_points(xp);
  display_msg(parse_str_2(mymsg(msg_got_xp), xp, skill_name));
end

procedure use_skill(variable user, variable target, variable skill, variable skill_bonus) begin
  call update_heal_arrays;
  ndebug("user1 " + user + " target " + target);
  if skill == SKILL_DOCTOR then begin
    call use_doctor(user, target, skill_bonus);
    set_sfall_return(0);
  end
  if skill == SKILL_FIRST_AID then begin
    call use_first_aid(user, target, skill_bonus);
  end
end

procedure healing_handler begin
  variable user = get_sfall_arg;
  variable target = get_sfall_arg;
  variable skill = get_sfall_arg;
  variable skill_bonus = get_sfall_arg;
  ndebug("user " + user + " target " + target);
  if enabled == 1 and (skill == SKILL_FIRST_AID or skill == SKILL_DOCTOR) then begin
    set_sfall_return(0); //override
    if combat_is_initialized then begin
      display_mymsg(msg_not_in_combat);
    end else begin
      call use_skill(user, target, skill, skill_bonus);
    end
    set_sfall_return(0); //override again?
  end
end

procedure rest_handler begin
  variable who;
  ndebug("rest ping");
  call update_heal_arrays;
  foreach who in party_member_list_critters begin
    if not is_healthy(who) and not is_in_array(obj_pid(who), doctor_used) then begin
      call use_doctor(dude_obj, who, 0, false);
    end
    if not is_healthy(who) and not is_in_array(obj_pid(who), fa_used) then begin
      call use_first_aid(dude_obj, who, 0, false);
    end
  end
  intface_redraw;
end

procedure travel_handler begin
  variable who;
  ndebug("travel ping");
  foreach who in party_member_list_critters begin
    if not is_healthy(who) and not is_in_array(obj_pid(who), doctor_used) then begin
      call use_doctor(dude_obj, who, 0, false);
    end
    if not is_healthy(who) and not is_in_array(obj_pid(who), fa_used) then begin
      call use_first_aid(dude_obj, who, 0, false);
    end
  end
end

procedure map_enter_p_proc begin
  if enabled == 1 then begin
    ndebug("living_anatomy_min_doctor="+living_anatomy_min_doctor);
    if living_anatomy_min_doctor < 300 then begin
      if critter_skill_level(dude_obj, SKILL_DOCTOR) >= living_anatomy_min_doctor
        and not has_trait(TRAIT_PERK, dude_obj, PERK_living_anatomy_perk)
      then begin
        ndebug(obj_name(dude_obj) + " gets living anatomy!");
        critter_add_trait(dude_obj, TRAIT_PERK, PERK_living_anatomy_perk, 1);
        display_mymsg(dude_name + " " + msg_living_anatomy_2);
        float_msg(dude_obj, mymsg(msg_living_anatomy), FLOAT_MSG_WHITE);
      end
    end
  end
end

procedure start begin
  if game_loaded then begin
    enabled = fo2tweaks_setting(sec_main, set_healing_revision);
    if enabled == 1 then begin

      living_anatomy_min_doctor = fo2tweaks_setting(sec_healing_revision, set_healing_living_anatomy_min_doctor);

      doctor_used = load_array(doctor_used_array);
      if doctor_used == 0 then begin
        doctor_used = create_array(0,0);
        save_array(doctor_used_array, doctor_used);
      end
      fa_used = load_array(fa_used_array);
      if fa_used == 0 then begin
        fa_used = create_array(0,0);
        save_array(fa_used_array, fa_used);
      end

      register_hook_proc(HOOK_USESKILL, healing_handler);
      register_hook_proc(HOOK_RESTTIMER, rest_handler);

      //reset healed arrays at midnight, any screen except dialog
      set_global_script_type(3);
      set_global_script_repeat(1800);

      msg = add_extra_msg_file(msg_file);
      ndebug("initialized");
    end
  end else begin
    if enabled == 1 then begin
      call update_heal_arrays;
      if in_world_map then begin
        call travel_handler;
      end
    end
  end
end
