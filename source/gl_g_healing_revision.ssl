#define NAME "gl_g_healing_revision"

#include "headers/fo2tweaks/fo2tweaks.h"

#define all_disabilities \
  (DAM_CRIP_ARM_LEFT bwor \
  DAM_CRIP_ARM_RIGHT bwor \
  DAM_CRIP_LEG_LEFT bwor \
  DAM_CRIP_LEG_RIGHT bwor \
  DAM_BLIND)

#define is_disabled(x) (critter_state(x) bwand all_disabilities)

#define doctor_used_array "g_doctor_used"
#define fa_used_array "g_fa_used"

#define doctor_skill_name 107
#define fa_skill_name 106

#define set_healing_revision "healing_revision"
#define sec_healing_revision "healing_revision"
#define set_healing_not_in_combat_msg "not_in_combat_msg"
#define set_healing_already_used_msg "already_used_msg"
#define set_healing_use_items "use_items"
#define set_healing_heal_disabilities_msg "heal_disabilites_msg"
#define set_healing_fail_disabilities_msg "fail_disabilites_msg"
#define set_healing_fail_msg "fail_msg"
#define set_healing_no_chance_msg "no_chance_msg"
#define set_healing_healthy_msg "healthy_msg"
#define set_healing_doctor_items "doctor_items"
#define set_healing_fa_items "first_aid_items"
#define set_healing_living_anatomy_min_doctor "living_anatomy_min_doctor"
#define set_healing_living_anatomy_msg "free_living_anatomy_msg"
#define set_healing_living_anatomy_msg2 "free_living_anatomy_msg2"

#define sec_healing_doctor_items "healing_revision_doctor_items"
#define sec_healing_fa_items "healing_revision_first_aid_items"

procedure start;
procedure healing_handler;
procedure missing_hp(variable who);
procedure grant_xp(variable hp, variable skill);
procedure get_best_helper_item(variable skill);
procedure get_max_charges(variable pid);
procedure get_skill_bonus(variable item);
procedure spend_charge(variable item);
procedure useobjon_handler;

variable begin
  doctor_used;
  fa_used;
  enabled;
  not_in_combat_msg;
  already_used_msg;
  no_chance_msg;
  heal_disabilities_msg;
  fail_disabilities_msg;
  healthy_msg;
  fail_msg;
  use_items := 0;
  doctor_min := 20;
  doctor_mult := 10;
  fa_mult := 5;
  heal_max := 15;
  cur_month;
  last_month;
  cur_day;
  last_day;
  doctor_items;
  fa_items;
  living_anatomy_min_doctor;
  living_anatomy_msg;
  living_anatomy_msg2;
end

procedure heal_disabilities(variable user, variable target, variable effective_skill) begin
  variable chance := effective_skill - doctor_min; //percentage
  ndebug("user " + user + ", target " + target + ", eff. doctor " + effective_skill);
  ndebug("chance " + chance + " eff. skill " + effective_skill + " min. doctor " + doctor_min);
  if chance < 1 then begin
    display_msg(no_chance_msg);
  end else begin
    variable r := random(1, 100);
    if r < chance then begin
      display_msg(heal_disabilities_msg);
      critter_uninjure(target, all_disabilities);
    end else begin
      display_msg(fail_disabilities_msg);
    end
  end
end

procedure is_healthy(variable target) begin
  variable max_hp := get_critter_stat(target, STAT_max_hp);
  variable cur_hp := get_critter_stat(target, STAT_current_hp);
  if cur_hp >= max_hp and not is_disabled(target) then begin
    return true;
  end else begin
    return false;
  end
end

procedure get_healed_hp(variable target, variable doctor_level, variable fa_level) begin
  variable mhp := missing_hp(target);
  variable healed := 0;
  variable healed_str;
  if doctor_level > 100 then doctor_level := 100;
  if fa_level > 100 then fa_level := 100;
  healed := (doctor_level/100.0)*(fa_level/100.0)*doctor_mult + random(-1, 1);
  if healed < 0 then healed := 0;
  healed_str := sprintf("%f", healed);
  ndebug("missing " + mhp + " doctor_level " + doctor_level + " fa_level " + fa_level + " healed " + healed_str
    + " max: " + heal_max +" |"+ fa_mult +"|" + doctor_mult);
  healed := floor2(healed);
  if healed > mhp then healed := mhp;
  return healed;
end

procedure get_fa_healed(variable target, variable fa_level) begin
  variable mhp := missing_hp(target);
  variable healed := 0;
  variable healed_str;
  if fa_level > 100 then fa_level := 100;
  healed := fa_mult * fa_level / 100.0 + random(-1, 1);
  if healed < 0 then healed := 0;
  healed_str := sprintf("%f", healed);
  ndebug("missing " + mhp + " fa_level " + fa_level + " healed " + healed_str + " | "+ fa_mult);
  healed := floor2(healed);
  if healed > mhp then healed := mhp;
  return healed;
end


procedure missing_hp(variable target) begin
  variable max_hp := get_critter_stat(target, STAT_max_hp);
  variable cur_hp := get_critter_stat(target, STAT_current_hp);
  variable mhp := max_hp - cur_hp;
  return mhp;
end

procedure use_doctor(variable user, variable target, variable skill_bonus, variable interactive := true) begin
  variable tmp, doctor_level, fa_level, effective_doctor, i, item;
  tmp := get_party_skill_level(SKILL_DOCTOR);
  doctor_level := tmp[1];
  tmp := get_party_skill_level(SKILL_FIRST_AID);
  fa_level := tmp[1];
  effective_doctor := doctor_level + skill_bonus;

  ndebug("doctor level " + doctor_level + ", skill bonus " + skill_bonus + ", effective " + effective_doctor);

  if interactive then begin
    if is_healthy(target) then begin // healthy, nothing to do
      display_msg(healthy_msg);
      return false;
    end else begin
      if is_in_array(obj_pid(target), doctor_used) then begin //already used doctor today
        display_msg(already_used_msg);
        return false;
      end
    end
  end

/*
  //if dude or companion using skill not in manual mode, search for a helper item in all of party inventory
  if use_items == 1 and in_party(user) then begin
    if fa_level < 100 then begin
      item := get_best_helper_item(SKILL_FIRST_AID);
      if item then begin
        skill_bonus := get_skill_bonus(item);
        call spend_charge(item);
        fa_level := fa_level + skill_bonus;
      end
    end

    if effective_doctor < 100 and skill_bonus == 0 then begin
      item := get_best_helper_item(SKILL_DOCTOR);
      if item then begin
        skill_bonus := get_skill_bonus(item);
        call spend_charge(item);
        effective_doctor := effective_doctor + skill_bonus;
      end
    end
  end
*/

  ndebug("user " + user + ", target " + target + ", eff. doctor " + effective_doctor);
  ndebug("critter state " + sprintf("%d", critter_state(target)));

  if is_disabled(target) then call heal_disabilities(user, target, effective_doctor);

  if missing_hp(target) > 0 then begin
    variable name := obj_name(target);
    variable hp := get_healed_hp(target, effective_doctor, fa_level);
    ndebug("trying to heal " + name);

    call array_push(doctor_used, obj_pid(target));
    set_sfall_global("g_heal_d", get_day);

//    gfade_in(1);
    game_time_advance(game_ticks(3600));
    if hp < 1 then begin
      display_msg(fail_msg);
      return false;
    end
    critter_heal(target, hp);
//    gfade_out(1);
    display_msg(obj_name(target) + " healed for " + hp + " HP");
    call grant_xp(hp, SKILL_DOCTOR);
  end
end

procedure use_first_aid(variable user, variable target, variable skill_bonus, variable interactive := true) begin
  variable fa_level, effective_fa, i, tmp;

  tmp := get_party_skill_level(SKILL_FIRST_AID);
  fa_level := tmp[1];
  effective_fa := fa_level + skill_bonus;
  ndebug("fa level " + fa_level + ", skill bonus " + skill_bonus + ", effective " + effective_fa);
  ndebug("userfa " + user + " target " + target);

  if interactive then begin
    if is_healthy(target) then begin // healthy, nothing to do
      display_msg(healthy_msg);
      return false;
    end else begin
      if is_in_array(obj_pid(target), fa_used) then begin //already used fa today
        display_msg(already_used_msg);
        return false;
      end
    end
  end

  if missing_hp(target) > 0 then begin
    variable name := obj_name(target);
    variable hp := get_fa_healed(target, fa_level);
    ndebug("trying to heal " + name);

    call array_push(fa_used, obj_pid(target));
    set_sfall_global("g_heal_d", get_day);

//    gfade_in(1); //fade out doesn't work?
    game_time_advance(game_ticks(1800));
    if hp < 1 then begin
      display_msg(fail_msg);
      return false;
    end
    critter_heal(target, hp);
//    gfade_out(1);
    display_msg(obj_name(target) + " healed for " + hp + " HP");
    call grant_xp(hp, SKILL_FIRST_AID);
  end
end

procedure get_item_skill_bonus(variable skill) begin
  variable who, item, items, i;
  if skill == SKILL_DOCTOR then items := doctor_items;
  if skill == SKILL_FIRST_AID then items := fa_items;
  foreach i in items begin
    foreach who in party_member_list_critters begin
      item := obj_carrying_pid_obj(who, obj_pid(i));
      if item then begin
        ndebug(obj_name(who) + " is carrying " + obj_name(item) + ", using it for " + mstr_skill(skill));
        return item;
      end
    end
  end
  return false;
end

procedure reset_heal_arrays begin
  ndebug("resetting heal arrays");
  clear_array(fa_used);
  clear_array(doctor_used);
end

procedure update_heal_arrays begin
  variable last_day := get_sfall_global_int("g_heal_d");
  ndebug("Last day " + last_day );
  if last_day == 0 then return;
  if get_day != last_day then call reset_heal_arrays;
end

procedure grant_xp(variable hp, variable skill) begin
  variable xp := hp * 10;
  variable skill_name;
  if skill == SKILL_DOCTOR then begin
    skill_name := mstr_skill(doctor_skill_name);
  end else begin
    skill_name := mstr_skill(fa_skill_name);
  end
  give_exp_points(xp);
  display_msg("You receive " + xp + " experience for successful use of " + skill_name + " skill." );
end

procedure use_skill(variable user, variable target, variable skill, variable skill_bonus) begin
  call update_heal_arrays;
  ndebug("user1 " + user + " target " + target);
  if skill == SKILL_DOCTOR then begin
    call use_doctor(user, target, skill_bonus);
    set_sfall_return(0);
  end
  if skill == SKILL_FIRST_AID then begin
    call use_first_aid(user, target, skill_bonus);
  end
end

procedure healing_handler begin
  variable user := get_sfall_arg;
  variable target := get_sfall_arg;
  variable skill := get_sfall_arg;
  variable skill_bonus := get_sfall_arg;
  ndebug("user " + user + " target " + target);
  if enabled == 1 and (skill == SKILL_FIRST_AID or skill == SKILL_DOCTOR) then begin
    set_sfall_return(0); //override
    if combat_is_initialized then begin
      display_msg(not_in_combat_msg);
    end else begin
      call use_skill(user, target, skill, skill_bonus);
    end
    set_sfall_return(0); //override again?
  end else begin
    set_sfall_return(-1); //default engine handler
  end
end

procedure rest_handler begin
  variable who;
  ndebug("rest ping");
  call update_heal_arrays;
  foreach who in party_member_list_critters begin
    if not is_healthy(who) and not is_in_array(obj_pid(who), doctor_used) then begin
      call use_doctor(dude_obj, who, 0, false); // best item will be found automatically
    end
    if not is_healthy(who) and not is_in_array(obj_pid(who), fa_used) then begin
      call use_first_aid(dude_obj, who, 0, false);
    end
  end
  intface_redraw;
end

procedure travel_handler begin
  variable who;
  ndebug("travel ping");
  foreach who in party_member_list_critters begin
    if not is_healthy(who) and not is_in_array(obj_pid(who), doctor_used) then begin
      call use_doctor(dude_obj, who, 0, false); // best item will be found automatically
    end
    if not is_healthy(who) and not is_in_array(obj_pid(who), fa_used) then begin
      call use_first_aid(dude_obj, who, 0, false);
    end
  end
end

procedure map_enter_p_proc begin
  if enabled then begin
    ndebug("living_anatomy_min_doctor="+living_anatomy_min_doctor);
    if living_anatomy_min_doctor < 300 then begin
      if critter_skill_level(dude_obj, SKILL_DOCTOR) >= living_anatomy_min_doctor
        and not has_trait(TRAIT_PERK, dude_obj, PERK_living_anatomy_perk)
      then begin
        ndebug(obj_name(dude_obj) + " gets living anatomy!");
        critter_add_trait(dude_obj, TRAIT_PERK, PERK_living_anatomy_perk, 1);
        display_msg(obj_name(dude_obj) + " " + living_anatomy_msg2);
        float_msg(dude_obj, living_anatomy_msg, FLOAT_MSG_WHITE);
      end
    end
  end
end

procedure set_max_charges(variable skill_items) begin
  variable max_charges, k, v;
  foreach k: v in skill_items begin
    max_charges := get_max_charges(k);
    set_proto_data(k, PROTO_MI_CHARGES, max_charges);
    ndebug("set max charges to " + max_charges + " for item pid " + k);
  end
end

procedure spend_charge(variable item) begin
  variable count, new_count;
  count := get_weapon_ammo_count(item);
  count := count - 1;
  if count == 0 then begin
    ndebug(obj_name(item) + " is depleted, destroying");
    destroy_object(item);
  end else begin
    set_weapon_ammo_count(item, count);
    ndebug("reduced " + obj_name(item) + " charges to " + count);
  end
  intface_redraw; //in case item is in dude's hands
end


procedure get_max_charges(variable pid) begin
  variable max_charges := 0;
  if doctor_items[pid] != 0 then begin
    max_charges := string_split(doctor_items[pid],",");
    max_charges := atoi(max_charges[1]);
  end
  if fa_items[pid] != 0 then begin
    max_charges := string_split(fa_items[pid],",");
    max_charges := atoi(max_charges[1]);
  end
  return max_charges;
end

procedure set_max_if_empty(variable obj) begin
  variable pid := obj_pid(obj);
  variable max_charges;
  if (doctor_items[pid] != 0 or fa_items[pid] != 0) then begin
    max_charges := get_max_charges(pid);
    if get_weapon_ammo_count(obj) == 0 or get_weapon_ammo_count(obj) > max_charges then begin
      set_weapon_ammo_count(obj, max_charges);
    end
  end
end

procedure load_charges begin
  variable i, o, inven, tmp, k, v;

  //convert item list keys to ints
  tmp := temp_array_map;
  foreach k: v in doctor_items begin
    tmp[atoi(k)] := doctor_items[k];
  end
  doctor_items := tmp;
  fix_array(doctor_items);
  tmp := temp_array_map;
  foreach k: v in fa_items begin
    tmp[atoi(k)] := fa_items[k];
  end
  fa_items := tmp;
  fix_array(fa_items);

  //set proto data
  call set_max_charges(doctor_items);
  call set_max_charges(fa_items);

  foreach i in list_as_array(LIST_GROUNDITEMS) begin
    call set_max_if_empty(i);
  end

  //add charges for items that are missing them
  foreach o in list_as_array(LIST_SCENERY) begin
    if not is_container(o) then continue;
    inven := inven_as_array(o);
    foreach i in inven begin
      call set_max_if_empty(i);
    end
  end

  foreach o in list_as_array(LIST_CRITTERS) begin
    inven := inven_as_array(o);
    foreach i in inven begin
      call set_max_if_empty(i);
    end
  end
  intface_redraw;
end

procedure start begin
  if game_loaded then begin
    enabled := fo2tweaks_setting(sec_main, set_healing_revision);
    if enabled == 1 then begin
      use_items := fo2tweaks_setting(sec_healing_revision, set_healing_use_items);

      not_in_combat_msg := fo2tweaks_string(sec_healing_revision, set_healing_not_in_combat_msg);
      already_used_msg := fo2tweaks_string(sec_healing_revision, set_healing_already_used_msg);
      no_chance_msg := fo2tweaks_string(sec_healing_revision, set_healing_no_chance_msg);
      healthy_msg := fo2tweaks_string(sec_healing_revision, set_healing_healthy_msg);
      fail_msg := fo2tweaks_string(sec_healing_revision, set_healing_fail_msg);
      heal_disabilities_msg := fo2tweaks_string(sec_healing_revision, set_healing_heal_disabilities_msg);
      fail_disabilities_msg := fo2tweaks_string(sec_healing_revision, set_healing_fail_disabilities_msg);

      living_anatomy_min_doctor := fo2tweaks_setting(sec_healing_revision, set_healing_living_anatomy_min_doctor);
      living_anatomy_msg := fo2tweaks_string(sec_healing_revision, set_healing_living_anatomy_msg);
      living_anatomy_msg2 := fo2tweaks_string(sec_healing_revision, set_healing_living_anatomy_msg2);

//      doctor_items := get_ini_section(fo2tweaks_ini, sec_healing_doctor_items);
//      fix_array(doctor_items);
//      fa_items := get_ini_section(fo2tweaks_ini, sec_healing_fa_items);
//      fix_array(fa_items);

      doctor_used := load_array(doctor_used_array);
      if doctor_used == 0 then begin
        doctor_used := create_array(0,0);
        save_array(doctor_used_array, doctor_used);
      end
      fa_used := load_array(fa_used_array);
      if fa_used == 0 then begin
        fa_used := create_array(0,0);
        save_array(fa_used_array, fa_used);
      end

      register_hook_proc(HOOK_USESKILL, healing_handler);
      register_hook_proc(HOOK_RESTTIMER, rest_handler);
//      register_hook_proc(HOOK_USEOBJON, useobjon_handler);

      //reset healed arrays at midnight, any screen except dialog
      set_global_script_type(3);
      set_global_script_repeat(1800);

//      call load_charges;
      ndebug("initialized");
    end
  end else begin
    if enabled == 1 then begin
      call update_heal_arrays;
      if in_world_map then begin
        call travel_handler;
      end
    end
  end
end

procedure get_best_helper_item(variable skill) begin
  variable k, v, pm, i, ar;
  if skill == SKILL_DOCTOR then ar := doctor_items;
  if skill == SKILL_FIRST_AID then ar := fa_items;

  foreach k: v in ar begin
    foreach pm in party_member_list_critters begin
      i := obj_carrying_pid_obj(pm, k);
      if i then return i;
    end
  end

  return false;
end

procedure get_skill_bonus(variable item) begin
  variable pid, bonus := false;
  pid := obj_pid(item);
  if doctor_items[pid] != 0 then begin
    bonus := string_split(doctor_items[pid],",");
    bonus := atoi(bonus[0]);
  end
  if fa_items[pid] != 0 then begin
    bonus := string_split(fa_items[pid],",");
    bonus := atoi(bonus[0]);
  end
  return bonus;
end


procedure useobjon_handler begin
  variable target := get_sfall_arg,
    user := get_sfall_arg,
    obj := get_sfall_arg,
    pid := obj_pid(obj), bonus, charges, ret := -1;

  if doctor_items[pid] != 0 then begin
    bonus := get_skill_bonus(obj);
    //have to spend charges separately because destroying object in the hook crashed the game
    charges := get_weapon_ammo_count(obj);
    if charges == 1 then begin
      ndebug(obj_name(obj) + " is depleted, destroying");
      ret := 1; //destroy
    end else begin
      charges := charges - 1;
      set_weapon_ammo_count(obj, charges);
      ndebug("reduced " + obj_name(obj) + " charges to " + charges);
      ret := 0;
    end
//    call use_doctor(user, target, bonus, true);
    //override
  end
  else
    if fa_items[pid] != 0 then begin
    bonus := get_skill_bonus(obj);
    charges := get_weapon_ammo_count(obj);
    if charges == 1 then begin
      ndebug(obj_name(obj) + " is depleted, destroying");
      ret := 1; //destroy
    end else begin
      charges := charges - 1;
      set_weapon_ammo_count(obj, charges);
      ndebug("reduced " + obj_name(obj) + " charges to " + charges);
      ret := 0;
    end
//    call use_first_aid(user, target, bonus, true);
  end
  ndebug("useobjon:" + ret);
  set_sfall_return(ret);
  if ret == 0 then intface_redraw;
end
