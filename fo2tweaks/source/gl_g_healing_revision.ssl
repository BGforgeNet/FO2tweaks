#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\sfall\define_extra.h"
#include "..\headers\sfall\sfall.h"
#include "..\headers\sfall\dik.h"
#include "..\headers\sfall\lib.misc.h"
#include "..\headers\sfall\lib.arrays.h"
#include "..\headers\fo2tweaks\fo2tweaks.h"

#define NAME "gl_g_healing_revision"

#define all_disabilities \
  (DAM_CRIP_ARM_LEFT bwor \
  DAM_CRIP_ARM_RIGHT bwor \
  DAM_CRIP_LEG_LEFT bwor \
  DAM_CRIP_LEG_RIGHT bwor \
  DAM_BLIND)

#define is_disabled(x) (critter_state(x) bwand all_disabilities)

#define doctor_used_array "g_doctor_used"
#define fa_used_array "g_fa_used"

#define doctor_skill_name 107
#define fa_skill_name 106

procedure start;
procedure healing_handler;
procedure missing_hp(variable who);
procedure grant_xp(variable hp, variable skill);

variable doctor_used;
variable fa_used;
variable enabled;
variable not_in_combat_msg;
variable already_used_msg;
variable no_chance_msg;
variable heal_disabilities_msg;
variable fail_disabilities_msg;
variable healthy_msg;
variable fail_msg;
variable use_items := 0;
variable doctor_min := 20;
variable doctor_mult := 10;
variable fa_mult := 5;
variable heal_max := 15;
variable cur_month;
variable last_month;
variable cur_day;
variable last_day;
variable doctor_items;
variable fa_items;

procedure heal_disabilities(variable user, variable target, variable effective_skill) begin
  variable chance := (effective_skill - doctor_min) / 100;
  ndebug("user " + user + ", target " + target + ", eff. doctor " + effective_skill);
  ndebug("chance " + chance + " eff. skill " + effective_skill + " min. doctor " + doctor_min);
  if chance < 1 then begin
    display_msg(no_chance_msg);
  end else begin
    variable r := random(1, 100);
    if r < chance then begin
      display_msg("test2, " + r + ", "+ chance);
      critter_uninjure(target, all_disabilities);
    end else begin
      display_msg("test3");
    end
  end
end

procedure is_healthy(variable target) begin
  variable max_hp := get_critter_stat(target, STAT_max_hp);
  variable cur_hp := get_critter_stat(target, STAT_current_hp);
  if cur_hp >= max_hp and not is_disabled(target) then begin
    return true;
  end else begin
    return false;
  end
end

procedure get_healed_hp(variable target, variable doctor_level, variable fa_level) begin
  variable mhp := missing_hp(target);
  variable healed := 0;
  variable healed_str;
  if doctor_level > 100 then doctor_level := 100;
  if fa_level > 100 then fa_level := 100;
  //healed := (fa_level/100.0)*fa_mult + (doctor_level/100.0)*(fa_level/100.0)*(heal_max - doctor_mult);
  healed := (doctor_level/100.0)*(fa_level/100.0)*doctor_mult;
  healed_str := sprintf("%f", healed);
  ndebug("missing " + mhp + " doctor_level " + doctor_level + " fa_level " + fa_level + " healed " + healed_str
    + " max: " + heal_max +" |"+ fa_mult +"|" + doctor_mult);
  healed := floor2(healed);
  if healed > mhp then healed := mhp;
  return healed;
end

procedure get_fa_healed(variable target, variable fa_level) begin
  variable mhp := missing_hp(target);
  variable healed := 0;
  variable healed_str;
  if fa_level > 100 then fa_level := 100;
  //healed := (fa_level/100.0)*fa_mult + (doctor_level/100.0)*(fa_level/100.0)*(heal_max - doctor_mult);
  healed := fa_mult * fa_level / 100.0;
  healed_str := sprintf("%f", healed);
  ndebug("missing " + mhp + " fa_level " + fa_level + " healed " + healed_str + " | "+ fa_mult);
  healed := floor2(healed);
  if healed > mhp then healed := mhp;
  return healed;
end


procedure missing_hp(variable target) begin
  variable max_hp := get_critter_stat(target, STAT_max_hp);
  variable cur_hp := get_critter_stat(target, STAT_current_hp);
  variable mhp := max_hp - cur_hp;
  return mhp;
end

procedure get_party_skill_level(variable skill) begin
  variable who;
  variable who_best;
  variable skill_level := 0;
  variable skill_name;
  foreach who in party_member_list_critters begin
    variable who_skill := critter_skill_level(who, skill);
    if who_skill > skill_level then begin
      skill_level := who_skill;
      who_best := who;
    end
  end
  if skill == SKILL_DOCTOR then begin
    skill_name := doctor_skill_name;
  end else begin
    skill_name := fa_skill_name;
  end
  ndebug(obj_name(who_best) + " has best skill " + mstr_skill(skill_name) + " of " + skill_level);
  return skill_level;
end

procedure use_doctor(variable user, variable target, variable skill_bonus, variable interactive := true) begin
  variable doctor_level := get_party_skill_level(SKILL_DOCTOR);
  variable fa_level := get_party_skill_level(SKILL_FIRST_AID);
  variable effective_doctor := doctor_level + skill_bonus;
  variable test1;
  variable i;
  variable tmp;
  ndebug("doctor level " + doctor_level + ", skill bonus " + skill_bonus + ", effective " + effective_doctor);

  if interactive then begin
    if is_healthy(target) then begin // healthy, nothing to do
      display_msg(healthy_msg);
      return false;
    end else begin
      ndebug("Check doctor_used");
      foreach i in doctor_used begin
        ndebug(i);
      end
      if scan_array(doctor_used, obj_pid(target)) != -1 then begin //already used doctor today
        display_msg(already_used_msg);
        return false;
      end
    end
  end

  //if dude or companion using skill not in manual mode, search for a helper item in all of party inventory
  if use_items == 1 and skill_bonus == 0 and scan_array(party_member_list_critters, user) != -1 then begin
    debug_msg("find best item, boost skill, spend item charges");
    //effective skill := skill_level + item_bonus;
  end

  ndebug("user " + user + ", target " + target + ", eff. doctor " + effective_doctor);
  ndebug("critter state " + sprintf("%d", critter_state(target)));

  if is_disabled(target) then call heal_disabilities(user, target, effective_doctor);

  if missing_hp(target) > 0 then begin
    variable name := obj_name(target);
    variable hp := get_healed_hp(target, effective_doctor, fa_level);
    ndebug("trying to heal " + name);

    call array_push(doctor_used, obj_pid(target));
    save_array(doctor_used_array, doctor_used);
    set_sfall_global("g_heal_d", get_day);

//    gfade_in(1);
    game_time_advance(game_ticks(3600));
    if hp < 1 then begin
      display_msg(fail_msg);
      return false;
    end
    critter_heal(target, hp);
//    gfade_out(1);
    display_msg(obj_name(target) + " healed for " + hp + " HP");
    call grant_xp(hp, SKILL_DOCTOR);
  end
end

procedure use_first_aid(variable user, variable target, variable skill_bonus, variable interactive := true) begin
  variable fa_level := get_party_skill_level(SKILL_FIRST_AID);
  variable effective_fa := fa_level + skill_bonus;
  variable i;
  ndebug("fa level " + fa_level + ", skill bonus " + skill_bonus + ", effective " + effective_fa);
  ndebug("userfa " + user + " target " + target);

  if interactive then begin
    if is_healthy(target) then begin // healthy, nothing to do
      display_msg(healthy_msg);
      return false;
    end else begin
      if scan_array(fa_used, obj_pid(target)) != -1 then begin //already used fa today
        display_msg(already_used_msg);
        return false;
      end
    end
  end

  if missing_hp(target) > 0 then begin
    variable name := obj_name(target);
    variable hp := get_fa_healed(target, fa_level);
    ndebug("trying to heal " + name);

    call array_push(fa_used, obj_pid(target));
    save_array(fa_used_array, doctor_used);
    set_sfall_global("g_heal_d", get_day);

//    gfade_in(1);
    game_time_advance(game_ticks(1800));
    if hp < 1 then begin
      display_msg(fail_msg);
      return false;
    end
    critter_heal(target, hp);
//    gfade_out(1);
    display_msg(obj_name(target) + " healed for " + hp + " HP");
    call grant_xp(hp, SKILL_FIRST_AID);
  end
end

procedure get_best_helper_item(variable skill) begin
  variable who, item, items;
  if skill == SKILL_DOCTOR then items := doctor_items;
  if skill == SKILL_FIRST_AID then items := fa_items;
  foreach item in items begin
    foreach who in party_member_list_critters begin
      if obj_is_carrying_obj_pid(who, item) then return([who, item]);
    end
  end
end

procedure reset_heal_arrays begin
  ndebug("resetting heal arrays");
//  free_array(fa_used);
  fa_used := create_array(0,0);
  save_array(fa_used_array, fa_used);
//  free_array(doctor_used);
  doctor_used := create_array(0, 0);
  save_array(doctor_used_array, doctor_used);
end

procedure update_heal_arrays begin
  variable last_day := get_sfall_global_int("g_heal_d");
  ndebug("Last day " + last_day );
  if last_day == 0 then return;
  if get_day != last_day then call reset_heal_arrays;
end

procedure grant_xp(variable hp, variable skill) begin
  variable xp := hp * 10;
  variable skill_name;
  if skill == SKILL_DOCTOR then begin
    skill_name := mstr_skill(doctor_skill_name);
  end else begin
    skill_name := mstr_skill(fa_skill_name);
  end
  give_exp_points(xp);
  display_msg("You receive " + xp + " experience for successful use of " + skill_name + " skill." );
end

procedure use_skill(variable user, variable target, variable skill, variable skill_bonus) begin
  if enabled == 1 then begin
      call update_heal_arrays;
  end
  ndebug("user1 " + user + " target " + target);
  if skill == SKILL_DOCTOR then begin
    call use_doctor(user, target, skill_bonus);
  end
  ndebug("user2 " + user + " target " + target);
  if skill == SKILL_FIRST_AID then begin
    call use_first_aid(user, target, skill_bonus);
  end
  ndebug("user3 " + user + " target " + target);
//  if skill != SKILL_DOCTOR and skill != SKILL_FIRST_AID then set_sfall_return(-1); //failsafe
end

procedure healing_handler begin
  variable user := get_sfall_arg;
  variable target := get_sfall_arg;
  variable skill := get_sfall_arg;
  variable skill_bonus := get_sfall_arg;
  ndebug("user " + user + " target " + target);
  if skill == SKILL_FIRST_AID or skill == SKILL_DOCTOR then begin
    set_sfall_return(0); //override
    if combat_is_initialized then begin
      display_msg(not_in_combat_msg);
    end else begin
      call use_skill(user, target, skill, skill_bonus);
    end
    set_sfall_return(0); //override
  end else begin
    set_sfall_return(-1); //default engine handler
  end
end


procedure start begin
  if game_loaded then begin
    enabled := fo2tweaks_setting(sec_main, set_healing_revision);
    if enabled == 1 then begin
      use_items := fo2tweaks_setting(sec_healing_revision, set_healing_use_items);

      not_in_combat_msg := fo2tweaks_string(sec_healing_revision, set_healing_not_in_combat_msg);
      already_used_msg := fo2tweaks_string(sec_healing_revision, set_healing_already_used_msg);
      no_chance_msg := fo2tweaks_string(sec_healing_revision, set_healing_no_chance_msg);
      healthy_msg := fo2tweaks_string(sec_healing_revision, set_healing_healthy_msg);
      fail_msg := fo2tweaks_string(sec_healing_revision, set_healing_fail_msg);

      doctor_items := fo2tweaks_comsep_setting(sec_healing_revision, set_healing_doctor_items);
      fa_items := fo2tweaks_comsep_setting(sec_healing_revision, set_healing_fa_items);

      doctor_used := load_array(doctor_used_array);
      if doctor_used == 0 then doctor_used := create_array(0,0);
      fa_used := load_array(fa_used_array);
      if fa_used == 0 then fa_used := create_array(0,0);

      register_hook_proc(HOOK_USESKILL, healing_handler);

      //reset healed arrays at midnight
      set_global_script_type(1);
      set_global_script_repeat(600);

      ndebug("initialized");
    end
  end
end
