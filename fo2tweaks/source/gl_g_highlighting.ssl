#include "..\headers\sfall\main.h"
#include "..\headers\fo2tweaks\fo2tweaks.h"
#include "..\headers\scenepid.h"
#include "..\headers\command.h"

#define set_highlight "highlighting"

#define sec_highlight "highlighting"
#define set_highlight_check_los "check_los"
#define set_highlight_key "key"
#define set_highlight_containers "containers"
#define set_highlight_critters "critters"
#define set_highlight_corpses "corpses"
#define set_highlight_traps "traps"
#define set_highlight_doors "doors"
#define set_highlight_ignore_nohighlight "ignore_nohighlight"
#define set_highlight_motion_scanner "motion_scanner"
#define set_highlight_color_critters "color_critters"
#define set_highlight_color_hostile_critters "color_hostile_critters"
#define set_highlight_color_corpses "color_corpses"
#define set_highlight_color_containers "color_containers"
#define set_highlight_color_containers_locked "color_locked_containers"
#define set_highlight_color_doors_locked "color_locked_doors"
#define set_highlight_color_traps "color_traps"
#define set_highlight_color_party "color_party"
#define set_highlight_color_dude "color_dude"
#define set_highlight_color_items "color_items"
#define set_highlight_color_transitions "color_transitions"
#define set_highlight_only_non_empty "only_non_empty"
#define set_highlight_exclude_items "exclude_items"
#define set_highlight_pits "pits"
#define set_highlight_transitions "transitions"

#define CRITTER_IS_DEAD   (1)
#define PID_MOTION_SENSOR  (59)
#define NO_HIGHLIGHT(obj)  (get_flags(obj) bwand FLAG_NOHIGHLIGHT)
#define NO_STEAL(obj)    (get_proto_data(obj_pid(obj), PROTO_CR_FLAGS) bwand CFLG_NOSTEAL)

#define TRAP_CAVE_ARMED(obj) ( \
  obj_pid(obj) == PID_CAVE_FLOOR_TRAP_VISIBLE \
  and not tile_contains_obj_pid(tile_num(obj), elevation(obj), PID_CAVE_FLOOR_TRAP_DISARMED) \
  and not tile_contains_obj_pid(tile_num(obj), elevation(obj), PID_CAVE_FLOOR_TRAP_DEPRESSED) \
)
#define TRAP_METAL_ARMED(obj) ( \
  obj_pid(obj) == PID_METAL_FLOOR_TRAP_VISIBLE \
  and not tile_contains_obj_pid(tile_num(obj), elevation(obj), PID_METAL_FLOOR_TRAP_DISARMED) \
  and not tile_contains_obj_pid(tile_num(obj), elevation(obj), PID_METAL_FLOOR_TRAP_DEPRESSED) \
)

#define is_trap(obj) (TRAP_CAVE_ARMED(obj) or TRAP_METAL_ARMED(obj))

#define NAME "gl_g_highlighting"

#define SC_TYPE_DOOR 0
#define PRODATA_SC_TYPE 32

#define in_loot_mode (get_game_mode BWAND INTFACELOOT)
#define obj_can_detect_obj(source, target) (obj_can_see_obj(source, target) or obj_can_hear_obj(source, target))

variable begin
  highlight_key;
  check_los;
  motion_scanner;
  ignore_nohighlight;

  color_critters;
  color_hostile_critters;
  color_corpses;
  color_containers;
  color_containers_locked;
  color_traps;
  color_party;
  color_dude;
  color_doors_locked;
  color_items;
  color_transitions;

  only_non_empty;
  pits;
  transitions;
  alsoDoor;
  exclude_items;
end

procedure is_door(variable scenery_obj) begin
  if get_proto_data(obj_pid(scenery_obj), PRODATA_SC_TYPE) == SC_TYPE_DOOR then return true;
  return false;
end

procedure get_color(variable obj) begin
  variable color := OUTLINE_NONE;

  if not obj then begin
    ndebug("skipping, not an object");
    return OUTLINE_NONE;
  end

  if elevation(obj) != elevation(dude_obj) then begin
    //ndebug("skipping, wrong elevation");
    return OUTLINE_NONE;
  end

  if check_los and obj_blocking_line(dude_obj, tile_num(obj), BLOCKING_TYPE_SHOOT) then begin
    ndebug("skipping by checklos");
    return OUTLINE_NONE;
  end

  if NO_HIGHLIGHT(obj) and not ignore_nohighlight then begin
    ndebug("skipping, no-highlight, " + NO_HIGHLIGHT(obj) + ", "+ ignore_nohighlight);
    return OUTLINE_NONE;
  end

  //critters and corpses
  if obj_type(obj) == OBJ_TYPE_CRITTER then begin
    if is_dead(obj) then begin
      if only_non_empty and is_empty(obj) then return OUTLINE_NONE;
      if NO_STEAL(obj) then return OUTLINE_NONE;
      return color_corpses;
    end else begin
      if obj == dude_obj then return color_dude;
      if is_in_array(obj, party_member_list_critters) then return color_party;

      //don't change critter outline in combat
      if in_combat and get_cursor_mode == CURSOR_TARGETING then begin
        variable current_outline := get_outline(obj);
        if current_outline != OUTLINE_NONE then begin
          ndebug("already outlined, keeping color");
          return current_outline;
        end
      end

 //     if hostile(obj) then return color_hostile_critters;
    end
    return color_critters;
  end

  //items and containers
  if obj_type(obj) == OBJ_TYPE_ITEM then begin
    //skip excluded
    if is_in_array(obj_pid(obj), exclude_items) then return OUTLINE_NONE;

    if obj_item_subtype(obj) == item_type_container then begin
      if obj_is_locked(obj) then return color_containers_locked;
      if only_non_empty and is_empty(obj) then return OUTLINE_NONE;
      return color_containers;
    end else return color_items; // default ground items
  end

  //scenery: traps, doors, transitions
  if obj_type(obj) == OBJ_TYPE_SCENERY then begin
    if is_trap(obj) or is_in_array(obj_pid(obj), pits) then return color_traps;

    if is_in_array(obj_pid(obj), transitions) then return color_transitions;

    if obj_is_locked(obj) and is_door(obj) then begin
      //ndebug("name is " + obj_name(obj) + ", sc_type is " + get_proto_data(obj_pid(obj), PRODATA_SC_TYPE));
      return color_doors_locked;
    end

  end

  return OUTLINE_NONE; //fallback
end

procedure enable_highlight begin
  variable obj, color := OUTLINE_NONE;

  if color_items or color_containers or color_containers_locked then begin
    foreach obj in list_as_array(LIST_GROUNDITEMS) begin
      color := get_color(obj);
      if color != OUTLINE_NONE then set_outline(obj, color);
    end
  end

  if color_corpses or color_critters then begin
    foreach obj in list_as_array(LIST_CRITTERS) begin
      color := get_color(obj);
      if color != OUTLINE_NONE then set_outline(obj, color);
    end
  end

  if color_traps or color_doors_locked or color_transitions then begin
    foreach obj in list_as_array(LIST_SCENERY) begin
      color := get_color(obj);
      //ndebug("item is " + obj_name(obj) + ", pid is " + obj_pid(obj) + ", color is " + color);
      if color != OUTLINE_NONE then set_outline(obj, color);
    end
  end

  tile_refresh_display;
end

procedure disable_highlight begin
  variable obj;
  ndebug("disable highlight");
  foreach obj in list_as_array(LIST_GROUNDITEMS) begin
    if obj != outlined_object then set_outline(obj, OUTLINE_NONE);
  end
  if color_corpses or color_critters then begin
    foreach obj in list_as_array(LIST_CRITTERS) begin
      set_outline(obj, OUTLINE_NONE);
    end
  end
  if color_traps or color_doors_locked or color_transitions then begin
    foreach obj in list_as_array(LIST_SCENERY) begin
      set_outline(obj, OUTLINE_NONE);
    end
  end
  tile_refresh_display;
end

procedure reset_highlight begin
  ndebug("reset highlight");
  call disable_highlight;
  if in_combat and get_cursor_mode == CURSOR_TARGETING then begin
    set_cursor_mode(CURSOR_COMMAND);
    set_cursor_mode(CURSOR_TARGETING);
  end
end

procedure keypress_handler begin
  variable pressed := get_sfall_arg,
        scan_code := get_sfall_arg,
        scanner, charges;

  if scan_code == highlight_key then begin
    if pressed and not in_loot_mode then begin

      if motion_scanner then begin
        scanner := obj_carrying_pid_obj(dude_obj, PID_MOTION_SENSOR);
        if not scanner then begin
          display_msg(mstr_misc(17));
          return;
        end

        if motion_scanner >= 2 then begin
          charges := get_weapon_ammo_count(scanner);
          if not charges > 0 then begin
            display_msg(mstr_misc(18));
            return;
          end
          set_weapon_ammo_count(scanner, charges - 1);
          intface_redraw;
        end
      end

      call enable_highlight;
    end else begin
      call reset_highlight;
    end
  end
end

procedure start begin
  if game_loaded then begin
    variable enabled := fo2tweaks_setting(sec_main, set_highlight);
    if enabled == 1 then begin
      variable i;
      ndebug("initialized");
      highlight_key := fo2tweaks_setting(sec_highlight, set_highlight_key);
      check_los := fo2tweaks_setting(sec_highlight, set_highlight_check_los);
      motion_scanner := fo2tweaks_setting(sec_highlight, set_highlight_motion_scanner);
      ignore_nohighlight := fo2tweaks_setting(sec_highlight, set_highlight_ignore_nohighlight);

      color_critters := fo2tweaks_setting(sec_highlight, set_highlight_color_critters);
      color_hostile_critters := fo2tweaks_setting(sec_highlight, set_highlight_color_hostile_critters);
      color_corpses := fo2tweaks_setting(sec_highlight, set_highlight_color_corpses);
      color_containers := fo2tweaks_setting(sec_highlight, set_highlight_color_containers);
      color_containers_locked := fo2tweaks_setting(sec_highlight, set_highlight_color_containers_locked);
      color_traps := fo2tweaks_setting(sec_highlight, set_highlight_color_traps);
      color_party := fo2tweaks_setting(sec_highlight, set_highlight_color_party);
      color_dude := fo2tweaks_setting(sec_highlight, set_highlight_color_dude);
      color_doors_locked := fo2tweaks_setting(sec_highlight, set_highlight_color_doors_locked);
      color_items := fo2tweaks_setting(sec_highlight, set_highlight_color_items);
      color_transitions := fo2tweaks_setting(sec_highlight, set_highlight_color_transitions);
      only_non_empty := fo2tweaks_setting(sec_highlight, set_highlight_only_non_empty);

      exclude_items := fo2tweaks_comsep_setting(sec_highlight, set_highlight_exclude_items);
      fix_array(exclude_items);
      pits := fo2tweaks_comsep_setting(sec_highlight, set_highlight_pits);
      fix_array(pits);
      transitions := fo2tweaks_comsep_setting(sec_highlight, set_highlight_transitions);
      fix_array(transitions);

      register_hook_proc(HOOK_KEYPRESS, keypress_handler);
    end
  end
end
