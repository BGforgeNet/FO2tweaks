/* Include Files */
#include ".\headers\define.h"
#include ".\headers\command.h"
#include ".\_sfall383_headers\define_extra.h"
#include ".\_sfall383_headers\sfall.h"
#include ".\_sfall383_headers\dik.h"

/* Standard Script Procedures */
procedure start;
procedure Hit_Hook;
procedure Damage_Hook;
procedure Set_AttackFire;

procedure start begin
  if game_loaded then begin
    register_hook_proc(HOOK_AFTERHITROLL, Hit_Hook);
    register_hook_proc(HOOK_ITEMDAMAGE, Damage_Hook);
  end
end

procedure Hit_Hook begin
/*
  Runs after fallout has decided if an attack will hit or miss
  int     arg1 - If the attack will hit. (0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit)
  critter arg2 - The attacker
  critter arg3 - The target of the attack
*/
variable TypeHit, CritterAttack, CritterTarget;
variable hand_slot, item;

  TypeHit := get_sfall_arg;
  CritterAttack := get_sfall_arg;
  CritterTarget := get_sfall_arg;

  if (CritterTarget and CritterAttack) then begin
    if ((obj_type(CritterTarget) == 1) and (TypeHit <= 1)) 
    or ((obj_type(CritterTarget) == 2) and  TypeHit) then begin  // miss hit
      if CritterAttack == dude_obj then begin
        hand_slot := active_hand;
        if hand_slot == 0 then hand_slot := INVEN_TYPE_LEFT_HAND; 
        item := critter_inven_obj(CritterAttack, hand_slot);
      end 
      else item := critter_inven_obj(CritterAttack, INVEN_TYPE_RIGHT_HAND);

      if item > 0 and obj_pid(item) == PID_MOLOTOV_COCKTAIL then begin
        call Set_AttackFire;
      end
   end
  end
end

procedure Damage_Hook begin
/*
  Runs when retriving the damage rating of the players used weapon. (Which may be their fists.)
  int     arg1 - The default min damage
  int     arg2 - The default max damage
  Item    arg3 - The weapin used. (0 if unarmed)
*/

variable weapon_obj_used;

  global_temp := get_sfall_arg;
  global_temp := get_sfall_arg;
  weapon_obj_used := get_sfall_arg;

  if weapon_obj_used > 0 and (obj_pid(weapon_obj_used) == PID_MOLOTOV_COCKTAIL) 
  and obj_item_subtype(weapon_obj_used) == item_type_weapon then begin
    call Set_AttackFire;
  end
end

procedure Set_AttackFire begin
  if (get_proto_data(PID_MOLOTOV_COCKTAIL, 48) == DMG_fire) then begin //PROTO_WP_DMG_TYPE=48
    set_attack_explosion_pattern(1, 0);
    set_attack_is_explosion_fire;
    debug_msg("Molotov: Set attack is explosion fire.");
  end
end
