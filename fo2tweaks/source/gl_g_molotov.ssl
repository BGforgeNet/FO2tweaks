#include "..\headers\define.h"
#include "..\headers\command.h"
#include "..\headers\sfall\sfall.h"
#include "..\headers\sfall\define_extra.h"
#include "..\headers\fo2tweaks\fo2tweaks.h"

#define NAME "gl_g_molotov"

procedure start;
procedure afterhit_hook;
procedure damage_hook;
procedure set_attack_fire;

procedure start begin
  if game_loaded then begin
     register_hook_proc(HOOK_AFTERHITROLL, afterhit_hook);
     register_hook_proc(HOOK_ITEMDAMAGE, damage_hook);
  end
end

procedure afterhit_hook begin
/*
   Runs after fallout has decided if an attack will hit or miss
   int     arg1 - If the attack will hit. (0 - critical miss, 1 - miss, 2 - hit, 3 - critical hit)
   critter arg2 - The attacker
   critter arg3 - The target of the attack
*/
  variable TypeHit, attacker, CritterTarget;
  variable item_pid;

  TypeHit := get_sfall_arg;
  attacker := get_sfall_arg;
  CritterTarget := get_sfall_arg;

  if (CritterTarget and attacker) then begin
    if ((obj_type(CritterTarget) == OBJ_TYPE_CRITTER) and (TypeHit <= 1))
      or ((obj_type(CritterTarget) == OBJ_TYPE_SCENERY) and  TypeHit)
    then begin  // miss hit
      item_pid := get_active_weapon_pid(attacker);
      if item_pid == PID_MOLOTOV_COCKTAIL then begin
        call set_attack_fire;
      end
    end
  end
end

procedure damage_hook begin
/*
   Runs when retriving the damage rating of the players used weapon. (Which may be their fists.)
   int     arg1 - The default min damage
   int     arg2 - The default max damage
   Item    arg3 - The weapon used. (0 if unarmed)
*/

  variable weapon_obj_used;

  global_temp := get_sfall_arg;
  global_temp := get_sfall_arg;
  weapon_obj_used := get_sfall_arg;

  if weapon_obj_used > 0 and (obj_pid(weapon_obj_used) == PID_MOLOTOV_COCKTAIL)
  and obj_item_subtype(weapon_obj_used) == item_type_weapon then begin
     call set_attack_fire;
  end
end

procedure set_attack_fire begin
  if (get_proto_data(PID_MOLOTOV_COCKTAIL, PROTO_WP_DMG_TYPE) == DMG_fire) then begin
     set_attack_explosion_pattern(1, 0);
     set_attack_is_explosion_fire;
     ndebug("set attack to fire explosion.");
  end
end
