procedure start;

#include "..\headers\define.h"
#include "..\headers\sfall\define_extra.h"
#include "..\headers\command.h"
#include "..\headers\sfall\sfall.h"
#include "..\headers\fo2tweaks\fo2tweaks.h"
#include "..\headers\sfall\dik.h"

#define NAME "gl_g_ammobox"
#define set_ammobox "ammobox"
#define sec_ammobox "ammobox"
#define set_ammobox_number "number"
#define set_ammobox_color "color"

variable box_num;
variable box_color;

procedure update_box(variable show_new);
procedure gamemode_hook;
procedure keypress_hook;
procedure mouseclick_hook;


procedure start begin
  if game_loaded then begin
   variable enabled := fo2tweaks_setting(sec_main, set_ammobox);
   box_num := fo2tweaks_setting(sec_ammobox, set_ammobox_number);
   box_color := fo2tweaks_setting(sec_ammobox, set_ammobox_color);
   if enabled == 1 then begin
    register_hook_proc(HOOK_GAMEMODECHANGE, gamemode_hook);
    register_hook_proc(HOOK_KEYPRESS, keypress_hook);
    register_hook_proc(HOOK_MOUSECLICK, mouseclick_hook);
    ndebug("initialized");
   end
  end
end

//combat start/stop
procedure gamemode_hook begin
  variable gamemode := get_game_mode;
  call update_box(1);
  gamemode := get_game_mode;
  ndebug("update box - gamemode");
end

//keyboard B
procedure keypress_hook begin
  if in_combat then begin
    if key_pressed(DIK_B) and in_combat then begin
      call update_box(0);
      ndebug("update box - keyboard");
    end
  end
end

//middle mouse
procedure mouseclick_hook begin
  if in_combat then begin
    variable event := get_sfall_arg;
    variable button := get_sfall_arg;
    if button == 2 and event == 1 then begin //pressed middle
      call update_box(0);
      ndebug("update box - mouse");
    end
  end
end

//some hooks are run before actual change
//show_new = 0 shows currently active ammo
//show_new = 1 shows currently inactive ammo with will become active
procedure update_box(variable show_new) begin
  variable item, ammo_pid, ammo_label;
  if in_combat then begin

    if show_new == 1 then begin
      ammo_pid := get_active_ammo_pid(dude_obj);
    end else begin
      ammo_pid := get_dude_inactive_ammo_pid;
    end

    if ammo_pid != -1 then begin
      ammo_label := message_str_game(GAME_MSG_PRO_ITEM, ammo_pid * 100);
      set_iface_tag_text(box_num, ammo_label, box_color);
      if not is_iface_tag_active(box_num) then begin
        show_iface_tag(box_num);
      end
    end else begin
      if is_iface_tag_active(box_num) then begin
        hide_iface_tag(box_num);
      end
    end

  end else begin //end of combat
    if is_iface_tag_active(box_num) then begin
      hide_iface_tag(box_num);
    end
  end
end
