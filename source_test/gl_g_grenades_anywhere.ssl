// Created by Mr.Stalin
// https://github.com/FakelsHub/sFall-Extended/commit/ecfa68a04a9178c21cdd178874b9f4fa8523f49c#commitcomment-36388003
#define SCRIPT_REALNAME "gl_g_grenades_anywhere"
#include "headers/fo2tweaks/fo2tweaks.h"

#define ATKTYPE_LWEAPON_SECOND      ATKTYPE_LWEP2
#define ATKTYPE_RWEAPON_SECOND      ATKTYPE_RWEP2
#define ATKMODE_THROWNING           ATKMODE_PRI_THROW
#define TARGET_PID 0x500000C // scroll blocker

procedure start;
procedure TargetObjectHandler;
procedure ToHitHandler;
procedure ExplosionHandler;
procedure GameModeHandler;
procedure DestroyTarget;

variable begin
  targetObject;
  only_once;
  explosive_weapon_pids;
end

procedure start begin
  if game_loaded then begin
    variable enabled = fo2tweaks_setting(sec_main, "improved_grenades");
    if enabled == 1 then begin
      explosive_weapon_pids = fo2tweaks_comsep_setting("improved_grenades", "weapons");
      fix_array(explosive_weapon_pids);
      register_hook_proc(HOOK_TARGETOBJECT, TargetObjectHandler);
      register_hook_proc(HOOK_ONEXPLOSION, ExplosionHandler);
      register_hook_proc(HOOK_GAMEMODECHANGE, GameModeHandler);
      ndebug("enabled");
    end
  end
end

procedure TargetObjectHandler begin
  variable slot, attack_mode, attack_type, weapon, tile, object, list;

  if (get_cursor_mode == CURSOR_TARGETING) then begin
    if (get_sfall_arg == 0) then begin // type
      if (get_sfall_arg) then begin   // exit on valid target
        if (targetObject) then call DestroyTarget;
        return;
      end
      slot := INVEN_TYPE_RIGHT_HAND if (active_hand) else INVEN_TYPE_LEFT_HAND;
      weapon := critter_inven_obj(dude_obj, slot);
      // get and check weapon mode
      attack_mode := get_proto_data(obj_pid(weapon), PROTO_IT_FLAGS);
      attack_type := get_attack_type;

      if (attack_type == ATKTYPE_LWEAPON_SECOND) or (attack_type == ATKTYPE_RWEAPON_SECOND) then
        attack_mode := (attack_mode bwand 0xF0) / 16; // shift by 4 bits to right
      else
        attack_mode := (attack_mode bwand 0x0F);

      if not(is_in_array(obj_pid(weapon) bwand 0xFFFFFF, explosive_weapon_pids)) then begin
        if (targetObject) then begin
          destroy_object(targetObject);
          targetObject := 0;
        end
        return;
      end

      tile := tile_under_cursor;
      if (tile == dude_tile or tile == -1) then return; // TODO: need fix bug explosion on dude tile
      if (targetObject) then begin
        ndebug("Replacement throwing target to: " + tile);
        move_to(targetObject, tile, dude_elevation);
      end
      else begin
        ndebug("Create throwing target at: " + tile);
        targetObject := create_object(TARGET_PID, tile, dude_elevation);
      end
      set_sfall_arg(1, 1); // set valid target
      set_sfall_arg(2, targetObject);
      set_sfall_return(targetObject);
    end
    else begin
      only_once := true;
    end
  end
  else if (targetObject) then begin
    call DestroyTarget;
  end
end

#define _attacker    1
#define _throw       6
procedure ExplosionHandler begin
variable object, list, tile;
  if (only_once and targetObject and get_sfall_arg_at(_throw) and get_sfall_arg_at(_attacker) == dude_obj) then begin
    debug_msg("ExplosionHandler");
    tile := tile_num(targetObject);
    list := objects_in_radius(tile, random(4, 6), dude_elevation, 1);
    foreach (object in list) begin
      if (object != dude_obj) then set_object_data(object, OBJ_DATA_WHO_HIT_ME, dude_obj);
    end
    only_once := false;
  end
end

procedure GameModeHandler begin
  if (targetObject and get_game_mode != PCOMBAT) then begin
    call DestroyTarget;
  end
end

procedure DestroyTarget begin
  debug_msg("Destroy throwing target.");
  destroy_object(targetObject);
  targetObject := 0;
end
